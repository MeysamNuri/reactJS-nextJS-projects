[{"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\index.js":"1","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\App.js":"2","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\reportWebVitals.js":"3","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\routes\\index.js":"4","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Adjusters.tsx":"5","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\FileDetail.tsx":"6","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\AdmissionOfficeList.tsx":"7","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\AdjustersHook.js":"8","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\interviewers\\Interviewers.tsx":"9","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Documents\\Document.tsx":"10","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\RejectBaseInfoSeason\\RejectionInfoSeason.tsx":"11","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Courses\\Courses.tsx":"12","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\SpecializedField\\SpecializedField.tsx":"13","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\Legal.tsx":"14","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\DescriptionAdjusterFile\\DescriptionAdjusterFile.tsx":"15","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\CaseHistory\\CaseHistory.tsx":"16","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\InformationAdjuster\\InformationAdjuster.tsx":"17","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\Documents\\Documents.tsx":"18","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\InterviewTime\\InterviewTime.jsx":"19","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\AdjustersServices.js":"20","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\httpServices\\service.js":"21","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\interviewers\\createInterviewer.tsx":"22","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Documents\\createDocument.tsx":"23","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\RejectBaseInfoSeason\\CreateRejectionInfoSeason.tsx":"24","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Courses\\CreateCourse.tsx":"25","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\SpecializedField\\createSpecialzedField.tsx":"26","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\LegalCard.tsx":"27","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\ScoreBoard\\ScoreBoard.tsx":"28","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\DetermineStatus\\DetermineStatus.tsx":"29","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\InterviewTime\\CreateInterviewTime.tsx":"30","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\DetermineStatus\\RejectDetemineStatus.tsx":"31","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\components\\UI\\DatePicker\\DatePicker.js":"32"},{"size":597,"mtime":1612684234663,"results":"33","hashOfConfig":"34"},{"size":397,"mtime":1612684234514,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1612684235234,"results":"36","hashOfConfig":"34"},{"size":6417,"mtime":1613820909825,"results":"37","hashOfConfig":"34"},{"size":1532,"mtime":1612684235233,"results":"38","hashOfConfig":"34"},{"size":1677,"mtime":1612684235942,"results":"39","hashOfConfig":"34"},{"size":1014,"mtime":1612684235740,"results":"40","hashOfConfig":"34"},{"size":17625,"mtime":1612684235222,"results":"41","hashOfConfig":"34"},{"size":7058,"mtime":1612684235605,"results":"42","hashOfConfig":"34"},{"size":4368,"mtime":1612684235581,"results":"43","hashOfConfig":"34"},{"size":3740,"mtime":1612684235663,"results":"44","hashOfConfig":"34"},{"size":6189,"mtime":1613820909704,"results":"45","hashOfConfig":"34"},{"size":5966,"mtime":1612684235747,"results":"46","hashOfConfig":"34"},{"size":1978,"mtime":1613820909772,"results":"47","hashOfConfig":"34"},{"size":3285,"mtime":1612684235988,"results":"48","hashOfConfig":"34"},{"size":4238,"mtime":1613820909781,"results":"49","hashOfConfig":"34"},{"size":10171,"mtime":1613821333290,"results":"50","hashOfConfig":"34"},{"size":3801,"mtime":1613821181594,"results":"51","hashOfConfig":"34"},{"size":5824,"mtime":1612684235641,"results":"52","hashOfConfig":"34"},{"size":6160,"mtime":1612684235248,"results":"53","hashOfConfig":"34"},{"size":677,"mtime":1612684236062,"results":"54","hashOfConfig":"34"},{"size":10056,"mtime":1613820909730,"results":"55","hashOfConfig":"34"},{"size":3772,"mtime":1612684235451,"results":"56","hashOfConfig":"34"},{"size":1918,"mtime":1612684235614,"results":"57","hashOfConfig":"34"},{"size":6611,"mtime":1612684235498,"results":"58","hashOfConfig":"34"},{"size":3710,"mtime":1612684235708,"results":"59","hashOfConfig":"34"},{"size":16145,"mtime":1613820909798,"results":"60","hashOfConfig":"34"},{"size":2975,"mtime":1612684236118,"results":"61","hashOfConfig":"34"},{"size":2591,"mtime":1612684235992,"results":"62","hashOfConfig":"34"},{"size":4907,"mtime":1612684235627,"results":"63","hashOfConfig":"34"},{"size":1988,"mtime":1612684236068,"results":"64","hashOfConfig":"34"},{"size":1707,"mtime":1613820909692,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"2rumkm",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"79"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"79"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"79"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"79"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"79"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"79"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"79"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"79"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"68"},"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\index.js",[],["159","160"],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\App.js",["161"],"import React from \"react\";\nimport \"./App.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport { BrowserRouter as Router, withRouter} from \"react-router-dom\";\nimport Routes from \"./routes/index\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      {/* <Adjusters/>   */}\n      <ToastContainer />\n      <Routes {...props} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\reportWebVitals.js",[],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\routes\\index.js",[],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Adjusters.tsx",["162"],"import React from \"react\";\r\nimport { Tabs, ConfigProvider } from \"antd\";\r\nimport Interviewers from \"./interviewers/Interviewers\";\r\nimport CourseInformation from \"./CourseInformation\";\r\nimport MyCalendar from \"./InterviewTime/InterviewTime\";\r\nimport Documents from \"./Documents/Document\";\r\nimport RejectionApplicants from \"./RejectBaseInfoSeason/RejectionInfoSeason\";\r\nimport SpecializedField from \"./SpecializedField/SpecializedField\";\r\nimport Courses from \"./Courses/Courses\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst Adjusters = () => {\r\n  return (\r\n    <div className=\"adjusters\">\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab=\"دوره ها\" key=\"1\">\r\n            <Courses />\r\n          </TabPane>\r\n          <TabPane tab=\"زمان مصاحبه\" key=\"2\">\r\n            <MyCalendar />\r\n          </TabPane>\r\n          <TabPane tab=\"مصاحبه کنندگان\" key=\"3\">\r\n            <Interviewers />\r\n          </TabPane>\r\n          <TabPane tab=\"نوع مدرک\" key=\"4\">\r\n            <Documents />\r\n          </TabPane>\r\n          <TabPane tab=\"رشته تخصصی\" key=\"5\">\r\n            <SpecializedField />\r\n          </TabPane>\r\n          <TabPane tab=\"دلایل رد متقاضیان\" key=\"6\">\r\n            <RejectionApplicants />\r\n          </TabPane>\r\n          {/* <TabPane tab=\"اطلاعات دوره\" key=\"7\">\r\n            <CourseInformation />\r\n          </TabPane> */}\r\n        </Tabs>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Adjusters;\r\n",["163","164"],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\FileDetail.tsx",[],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\AdmissionOfficeList.tsx",["165"],"import React from \"react\";\r\nimport { Tabs, ConfigProvider } from \"antd\";\r\nimport Legal from \"../AdmissionOfficeList/Legal/Legal\";\r\nimport { useAllAdjusterType } from \"../Adjusters/AdjustersHook\";\r\nimport filter from \"../../assets/images/filter.svg\";\r\n\r\nconst { TabPane } = Tabs;\r\nconst AdmissionOfficeList = () => {\r\n  const { data: allAdjusterType } = useAllAdjusterType();\r\n \r\n  return (\r\n    <div>\r\n      <p style={{textAlign:\"right\"}} >\r\n        فیلتر با کلمه مورد نظر\r\n        <img src={filter} alt={filter} />\r\n      </p>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab=\"حقیقی\" key=\"1\">\r\n            <Legal />\r\n          </TabPane>\r\n          <TabPane tab=\"حقوقی\" key=\"2\">\r\n            حقوقی\r\n          </TabPane>\r\n          <TabPane tab=\"دادگستری\" key=\"3\">\r\n            دادگستری\r\n          </TabPane>\r\n        </Tabs>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdmissionOfficeList;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\AdjustersHook.js",["166","167"],"import {\r\n  useQuery,\r\n  useMutation,\r\n  queryCache,\r\n  MutationResultPair,\r\n} from \"react-query\";\r\nimport * as api from \"./AdjustersServices\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n/**\r\n *  Interview\r\n */\r\n\r\n//getallInterviewer\r\nconst useAllInterviewer = () => {\r\n  return useQuery(\"getAllInterviewer\", api.getAllInterviewer, {\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n//CreateInterviewr\r\nconst useCreateInterviewer = (interview) => {\r\n  return useMutation(api.createInterviewer, {\r\n    onSuccess: (\r\n      _,\r\n      { firstName, familyName, nationalCode, degree, bank, phone, sheba, file }\r\n    ) => {\r\n      queryCache.refetchQueries(\"projectsInterview\");\r\n      toast.success(\"مصاحبه‌کننده به درستی افزوده شد.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\nconst useInterviewerId = (id) => {\r\n  return useQuery([\"interviewerId\", id], api.getInterviewerId);\r\n};\r\n\r\n//AllBanks\r\nconst useAllBanks = () => {\r\n  return useQuery(\"banks\", api.getBanks, {\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n//deletInterviewer\r\nconst useDeletInterviewer = () => {\r\n  return useMutation(api.deleteInterviewer, {\r\n    onSuccess: (_, id) => {\r\n      queryCache.refetchQueries([\"projectsInterview\"]);\r\n      toast.success(\"مصاحبه کننده به درستی حذف گردید.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"حذف مصاحبه‌کننده با خطا مواجه گردید.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//updateInterViewer\r\nconst useUpdateInterviewer = ({\r\n  // interviewrId,\r\n  tt: {\r\n    firstName,\r\n    familyName,\r\n    nationalCode,\r\n    degreeId,\r\n    bankId,\r\n    phone,\r\n    sheba,\r\n    file,\r\n  },\r\n}) => {\r\n  return useMutation(api.updateInterviewer, {\r\n    onSuccess: () => {\r\n      queryCache.refetchQueries(\"projectsInterview\");\r\n      //queryCache.refetchQueries([\"interviewerId\", interviewrId]);\r\n      toast.success(\"مصاحبه کننده به درستی ویرایش شد.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی در ویرایش مصاحبه کننده رخ داده است.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * COURSE\r\n */\r\n\r\n//AllAdjusterType\r\nconst useAllAdjusterType = () => {\r\n  return useQuery(\"adjusterType\", api.getAdjusterType, {\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n//AllSeasons\r\nconst useAllSeasons = () => {\r\n  return useQuery(\"seasons\", api.getSeason, {\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n//createCourse\r\nconst useCreateCourse = (course) => {\r\n  return useMutation(api.createCourse, {\r\n    onSuccess: (_, course) => {\r\n      queryCache.refetchQueries(\"projectsCourse\");\r\n      toast.success(\"دوره به درستی افزوده شد.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//updateCourse\r\nconst useUpdateCourse = () => {\r\n  return useMutation(api.updateCourse, {\r\n    onSuccess: (_, { id, ...updateCourse }) => {\r\n      queryCache.refetchQueries(\"projectsCourse\");\r\n      queryCache.refetchQueries([\"CourseId\", id]);\r\n      toast.success(\"دوره به درستی ویرایش شد.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی در ویرایش دوره رخ داده است.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//deleteCourse\r\nconst useDeletCourse = () => {\r\n  return useMutation(api.deleteCourse, {\r\n    onSuccess: (response, id) => {\r\n      queryCache.refetchQueries(\"projectsCourse\");\r\n      toast.success(\"دوره به درستی حذف شد.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی در حذف دوره رخ داده است.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//GetCourse\r\nconst useGetCourseId = (CourseId) => {\r\n  return useQuery([\"CourseId\", CourseId], api.getCourse);\r\n};\r\n\r\n//interviewerTime\r\nconst useGetInterviewTime = (fromDate, endDate) => {\r\n  return useQuery([\"InterviewTime\", fromDate, endDate], api.getInterviewTime);\r\n};\r\n\r\n//removeInterviewTime\r\nconst useDeletInterviewTime = () => {\r\n  return useMutation(api.deletInterviewTime, {\r\n    onSuccess: (_, id) => {\r\n      const InterviewTime = queryCache.getQueries([\"InterviewTime\"]);\r\n      InterviewTime.forEach((q) => {\r\n        const interview = queryCache.getQueryData(q.queryKey);\r\n        const data = interview?.result?.filter((item) => item.id !== id);\r\n        queryCache.setQueryData(q.queryKey, { result: data });\r\n      });\r\n      toast.success(\"زمان مصاحبه به درستی حذف شد.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی در حذف زمان مصاحبه رخ داده است.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//courseTypeAvailable\r\nconst useAllCourseAvailable = () => {\r\n  return useQuery(\"courseAvailable\", api.getCourseAvailable, {\r\n    refetchOnWindowFocus: false,\r\n    //refetchInterval: 1000\r\n  });\r\n};\r\n\r\n//createInterviewTime\r\nconst useCreateTimeInterview = () => {\r\n  return useMutation(api.createInterviewTime, {\r\n    onSuccess: (_, interviewTime) => {\r\n      queryCache.refetchQueries(\"InterviewTime\");\r\n      toast.success(\"زمان مصاحبه با موفقیت اضافه گردید\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: (err) => {\r\n      let message = \"\";\r\n      if (err.response.data.errorType == -3) {\r\n        message = \"زمان مصاحبه نمیتواند قبل از زمان جاری باشد\";\r\n      }\r\n\r\n      //const errorMessage = err.response.data.message;\r\n      toast.error(message, {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Document\r\n */\r\n\r\n//getDocument\r\nconst useAllDocument = () => {\r\n  return useQuery(\"allDocument\", api.getAllDocument);\r\n};\r\n\r\n//createDocument\r\nconst useCreateDocument = (newDocument) => {\r\n  return useMutation(api.createDocument, {\r\n    onSuccess: (_, newDocument) => {\r\n      queryCache.refetchQueries(\"allDocument\");\r\n      toast.success(\".سند به درستی افزوده شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".خطایی در افزودن سند رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//deleteDocument\r\nconst useDeletDocument = () => {\r\n  return useMutation(api.deletDocument, {\r\n    onSuccess: (_, id) => {\r\n      const Document = queryCache.getQueryData(\"allDocument\");\r\n      const data = Document?.result?.filter((item) => item.id !== id);\r\n      queryCache.setQueryData(\"allDocument\", { result: data });\r\n      toast.success(\".سند به درستی حذف شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".خطایی در حذف سند رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Specialized field\r\n */\r\n\r\n//getSpecializedFeild\r\nconst useGetSpecializedFeild = () => {\r\n  return useQuery(\"allFields\", api.specializedField);\r\n};\r\n\r\n//createSpecializedFeild\r\nconst useCreateSpecializedFeild = (newFeild) => {\r\n  return useMutation(api.createSpecilizedFeild, {\r\n    onSuccess: (_, newFeild) => {\r\n      queryCache.refetchQueries(\"allFields\");\r\n      toast.success(\".رشته به درستی افزوده شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".خطایی در افزودن رشته رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//getSpecialzedFeildId\r\nconst useGetSpecialzedFeildId = (id, addForm) => {\r\n  return useQuery([\"specializedFieldId\", id], api.getSpecilizedFeildId, {\r\n    enabled: !!id,\r\n  });\r\n};\r\n\r\n//updateSpecialzedFeild\r\nconst useUpdateSpecialzedFeild = () => {\r\n  return useMutation(api.updateSpecilizedFeild, {\r\n    onSuccess: (_, { Encid, ...newSpecialzesField }) => {\r\n      queryCache.refetchQueries(\"allFields\");\r\n      queryCache.refetchQueries([\"specializedFieldId\", Encid]);\r\n      toast.success(\".رشته تخصصی به درستی ویرایش شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".خطایی در ویرایش رشته تخصصی رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//deletFeild\r\nconst useDeletFeild = () => {\r\n  return useMutation(api.deletField, {\r\n    onSuccess: (_, id) => {\r\n      const allFields = queryCache.getQueryData(\"allFields\");\r\n      const data = allFields?.result?.filter((item) => item.id !== id);\r\n      queryCache.setQueryData(\"allFields\", { result: data });\r\n      toast.success(\".رشته با موفقیت حذف گردید\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".حذف رشته با خطا روبه رو گردید\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n *  getRejectAllBaseInfo\r\n */\r\n\r\n//useRejectAllBaseInfo\r\nconst useRejectAllBaseInfo = () => {\r\n  return useQuery(\"allRejectBaseinfo\", api.getRejectAllBaseInfo);\r\n};\r\n\r\n//useRejectAllBaseInfo\r\nconst useDeletRejectBaseInfo = () => {\r\n  return useMutation(api.removeRejectBaseInfo, {\r\n    onSuccess: (_, id) => {\r\n      const allReject = queryCache.getQueryData(\"allRejectBaseinfo\");\r\n      const data = allReject?.result?.filter((item) => item.id !== id);\r\n      queryCache.setQueryData(\"allRejectBaseinfo\", { result: data });\r\n      toast.success(\".دلیل رد متقاضی به درستی حذف شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".خطایی در حذف دلیل رد متقاضی رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//createRejectionInfoSeason\r\nconst useCreateRejectionSeason = (newSeason) => {\r\n  return useMutation(api.createRejectionBaseInfoSeason, {\r\n    onSuccess: (_, newSeason) => {\r\n      queryCache.refetchQueries(\"allRejectBaseinfo\");\r\n      toast.success(\".دلیل رد متقاضی به درستی اضافه شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\".خطایی در افزودن دلیل دلیل رد متقاضی رخ داده است\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n//updateRejectionInfoSeason\r\nconst useUpdateRejectionInfoSeason = () => {\r\n  return useMutation(api.updateRejectionBaseInfoSeason, {\r\n    onSuccess: (_, { id, ...update }) => {\r\n      queryCache.refetchQueries(\"allRejectBaseinfo\");\r\n      toast.success(\".دلیل رد متقاضی به درستی ویرایش شد\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast.error(\"خطایی در ویرایش دلیل رد متقاضی رخ داده است.\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\nexport {\r\n  useCreateInterviewer,\r\n  useDeletInterviewer,\r\n  useInterviewerId,\r\n  useUpdateInterviewer,\r\n  useAllAdjusterType,\r\n  useAllSeasons,\r\n  useCreateCourse,\r\n  useGetCourseId,\r\n  useUpdateCourse,\r\n  useDeletCourse,\r\n  useGetInterviewTime,\r\n  useAllCourseAvailable,\r\n  useCreateTimeInterview,\r\n  useAllDocument,\r\n  useDeletDocument,\r\n  useCreateDocument,\r\n  useGetSpecializedFeild,\r\n  useCreateSpecializedFeild,\r\n  useGetSpecialzedFeildId,\r\n  useDeletFeild,\r\n  useDeletInterviewTime,\r\n  useAllBanks,\r\n  useUpdateSpecialzedFeild,\r\n  useRejectAllBaseInfo,\r\n  useDeletRejectBaseInfo,\r\n  useCreateRejectionSeason,\r\n  useUpdateRejectionInfoSeason,\r\n  useAllInterviewer,\r\n};\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\interviewers\\Interviewers.tsx",["168","169","170","171","172","173","174"],"import React, { useEffect, useState } from \"react\";\r\nimport { usePaginatedQuery, useQueryCache } from \"react-query\";\r\nimport { api } from \"../../../httpServices/service\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Space,\r\n  Modal,\r\n  Pagination,\r\n  Popover,\r\n  ConfigProvider,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport \"./Interviewers.css\";\r\nimport CreateInterviewer from \"./createInterviewer\";\r\nimport \"./Interviewers.css\";\r\nimport { useDeletInterviewer, useInterviewerId } from \"../AdjustersHook\";\r\nimport { getInterviewerId } from \"../AdjustersServices\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport edit from \"../../../assets/images/edit.svg\";\r\nimport trash from \"../../../assets/images/trash.svg\";\r\n\r\nconst Interviewers = () => {\r\n  const cache = useQueryCache();\r\n  const [removeInterviewer] = useDeletInterviewer();\r\n  const [addForm, setAddForm] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [current, setCurrent] = useState(1);\r\n  const [visible, setVisible] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState({ id: \"\" });\r\n  const [itemUser, setItemUser] = useState(null);\r\n  const [pageModel, setPageModel] = useState({\r\n    pageSize: 10,\r\n  });\r\n  let EncId = selectedUser.id;\r\n\r\n  //getInterviewerId\r\n  useEffect(() => {\r\n    if (selectedUser && selectedUser.id !== \"\") {\r\n      api.get(`/Interviewer/${selectedUser.id}`).then((res) => {\r\n        setItemUser(res.data.result);\r\n        setLoading(false);\r\n      });\r\n    }\r\n  }, [selectedUser]);\r\n\r\n  //apiRequestPagination\r\n  const fetchInterviewer = (key: number, page = 1) =>\r\n    api.get(\r\n      `/Interviewer/all/paged?pageSize=${pageModel.pageSize}&pageNo=${current}`\r\n    );\r\n  const { isLoading,resolvedData, } = usePaginatedQuery([\"projectsInterview\", current], fetchInterviewer);\r\n\r\n\r\n\r\n  // DataInterviewer\r\n  let data = resolvedData?.data.result.map((user: any) => {\r\n    let obj = {\r\n      key: user.id,\r\n      id: user.id,\r\n      firstName: user.firstName,\r\n      familyName: user.familyName,\r\n      nationalCode: user.nationalCode,\r\n      degree: user.degree.title,\r\n      bank: user.bank.name,\r\n      phone: user.phone,\r\n      sheba: user.sheba,\r\n    };\r\n    return obj;\r\n  });\r\n\r\n  //handleDataPage\r\n  useEffect(() => {\r\n    if (data?.length <= 0) {\r\n      setCurrent((oldState) => {\r\n        if (oldState === 1) {\r\n          return oldState;\r\n        }\r\n        return oldState - 1;\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  //editInterviewer\r\n  const editInterviewerHandler = () => {\r\n    setLoading(true);\r\n    setAddForm(false);\r\n    setVisible(true);\r\n  };\r\n  //removeInterviewer\r\n  const removeInterviewerHandler = (key: any) => {\r\n    removeInterviewer(key);\r\n  };\r\n\r\n  //coloumnsTable\r\n  let columns: any = [\r\n    {\r\n      title: \"نام\",\r\n      dataIndex: \"firstName\",\r\n      key: \"firstName\",\r\n      sorter: (a: any, b: any) => a.name?.length - b.name?.length,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n      ellipsis: true,\r\n    },\r\n\r\n    {\r\n      title: \"نام خانوادگی\",\r\n      dataIndex: \"familyName\",\r\n      key: \"familyName\",\r\n      sorter: (a: any, b: any) => a.familyName?.length - b.familyName?.length,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"کدملی\",\r\n      dataIndex: \"nationalCode\",\r\n      key: \"nationalCode\",\r\n      ellipsis: true,\r\n    },\r\n\r\n    {\r\n      title: \"مدرک تحصیلی\",\r\n      dataIndex: \"degree\",\r\n      key: \"degree\",\r\n    },\r\n    {\r\n      title: \"شماره تلفن\",\r\n      dataIndex: \"phone\",\r\n      key: \"phone\",\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"نام بانک\",\r\n      dataIndex: \"bank\",\r\n      key: \"bank\",\r\n    },\r\n    {\r\n      title: \"شبا\",\r\n      dataIndex: \"sheba\",\r\n      key: \"sheba\",\r\n    },\r\n    {\r\n      title: \"عملیات\",\r\n      fixed: \"left\",\r\n      render: (text: any, record: any) => (\r\n        <Space size=\"middle\">\r\n          <div className=\"operations\">\r\n            {loading ? (\r\n              <LoadingOutlined />\r\n            ) : (\r\n              <Popover content=\"ویرایش\" overlayClassName=\"popAction\">\r\n                <a onClick={editInterviewerHandler} className=\"action\">\r\n                 <img src={edit}  alt=\"edit\" />\r\n                </a>\r\n              </Popover>\r\n            )}\r\n            {data.length >= 1 ? (\r\n              <ConfigProvider direction=\"rtl\">\r\n                <Popconfirm\r\n                  title=\"از حذف آیتم مورد نظر مطمئن هستید؟\"\r\n                  onConfirm={() => removeInterviewerHandler(record.key)}\r\n                  okText=\"بله\"\r\n                  cancelText=\"خیر\"\r\n                >\r\n                  <Popover content=\"حذف\" overlayClassName=\"popAction\">\r\n                    <a className=\"action\">\r\n                     <img src={trash}   alt=\"trash\" />\r\n                    </a>\r\n                  </Popover>\r\n                </Popconfirm>\r\n              </ConfigProvider>\r\n            ) : null}\r\n          </div>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  //changePage\r\n  const changePageHandler = (page: number) => {\r\n    setCurrent(page);\r\n  };\r\n\r\n  //showModalInterviewers\r\n  const showCreateInterviewersHandler = () => {\r\n    setAddForm(true);\r\n    setVisible(true);\r\n  };\r\n\r\n  //selectRowItem\r\n  const userRowSelection = (selectedItem: any) => {\r\n    setSelectedUser(selectedItem);\r\n  };\r\n\r\n  return (\r\n    <div className=\"interviewers\">\r\n      <Button type=\"primary\" onClick={showCreateInterviewersHandler}>\r\n        ایجاد مصاحبه کننده\r\n      </Button>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          columns={columns}\r\n          dataSource={data}\r\n          showSorterTooltip={false}\r\n          pagination={false}\r\n          rowKey=\"index\"\r\n          onRow={(record) => {\r\n            return {\r\n              onClick: () => {\r\n                userRowSelection(record);\r\n              },\r\n            };\r\n          }}\r\n          loading={isLoading ? true : false}\r\n        />\r\n\r\n        <Pagination\r\n          total={resolvedData?.data.totalCount}\r\n          pageSize={pageModel.pageSize}\r\n          showTotal={(total, range) =>\r\n            ` تعداد کل کاربران:   ${resolvedData?.data.totalCount} `\r\n          }\r\n          current={current}\r\n          onChange={changePageHandler}\r\n        />\r\n        <Modal\r\n          title={addForm ? \"ایجاد مصاحبه کننده \" : \"ویرایش مصاحبه کننده \"}\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => {\r\n            setVisible(false);\r\n          }}\r\n          onCancel={() => {\r\n            setVisible(false);\r\n          }}\r\n          width={1400}\r\n        >\r\n          <CreateInterviewer\r\n            itemUser={itemUser}\r\n            addForm={addForm}\r\n            closeModal={() => setVisible(false)}\r\n          />\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Interviewers;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Documents\\Document.tsx",["175","176","177","178"],"import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Space,\r\n  Modal,\r\n  ConfigProvider,\r\n  Switch,\r\n  Popconfirm,\r\n  Popover,\r\n} from \"antd\";\r\nimport {\r\n  useAllDocument,\r\n  useAllAdjusterType,\r\n  useDeletDocument,\r\n} from \"../AdjustersHook\";\r\nimport CreateDocument from \"./createDocument\";\r\nimport edit from \"../../../assets/images/edit.svg\";\r\nimport trash from \"../../../assets/images/trash.svg\";\r\nimport \"./Document.css\";\r\n\r\nconst Document = () => {\r\n  const [seletedDocument, setSeletedDocument] = useState(0);\r\n  const [visible, setVisible] = useState(false);\r\n  const { data: allDocuments, isLoading } = useAllDocument();\r\n  const { data: allAdjusterType } = useAllAdjusterType();\r\n  const [remove] = useDeletDocument();\r\n\r\n  const changeRequireHandler = (checked: any) => {\r\n    console.log(`switch to ${checked}`);\r\n  };\r\n\r\n  let dataDocument = allDocuments?.result?.map((item: any) => {\r\n    let obj = {\r\n      key: item.id,\r\n      id: item.id,\r\n      title: item.title,\r\n      adjusterType: item.relatedAdjusterTypes?.map((item: any) => (\r\n        <span key={item.id} className=\"nav-text\">\r\n          <span className=\"nav-item-title\">\r\n            <span>{item.adjusterType.title}</span>\r\n            <Switch\r\n              checkedChildren=\"اجباری\"\r\n              unCheckedChildren=\"غیر اجباری\"\r\n              defaultChecked\r\n              onChange={changeRequireHandler}\r\n            />\r\n          </span>\r\n        </span>\r\n      )),\r\n    };\r\n\r\n    return obj;\r\n  });\r\n\r\n  //editDocument\r\n  const editDocumentHandler = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  //romoveDocumet\r\n  const removeDocHandler = (key: any) => {\r\n    remove(key);\r\n  };\r\n\r\n  let columns = [\r\n    {\r\n      title: \"نام مستند\",\r\n      dataIndex: \"title\",\r\n      editable: true,\r\n    },\r\n    {\r\n      title: \"نوع ارزیاب(اجباری یا غیر اجباری بودن مدارک)\",\r\n      dataIndex: \"adjusterType\",\r\n      className: \"adjusterRequire\",\r\n      width: \"50%\",\r\n    },\r\n\r\n    {\r\n      title: \"عملیات\",\r\n      dataIndex: \"عملیات\",\r\n      render: (text: any, record: any) => (\r\n        <Space size=\"middle\">\r\n          <div className=\"operations\">\r\n            <a className=\"action\" onClick={editDocumentHandler}>\r\n             <img src={edit} alt=\"edit\"/>\r\n            </a>\r\n\r\n            {dataDocument.length >= 1 ? (\r\n              <Popconfirm\r\n                title=\"از حذف آیتم مورد نظر مطمئن هستید؟\"\r\n                onConfirm={() => removeDocHandler(record?.key)}\r\n                okText=\"بله\"\r\n                cancelText=\"خیر\"\r\n              >\r\n                <Popover content=\"حذف\" overlayClassName=\"popAction\">\r\n                  <a className=\"action\">\r\n                   <img src={trash}  alt=\"trash\"/>\r\n                  </a>\r\n                </Popover>\r\n              </Popconfirm>\r\n            ) : null}\r\n          </div>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  //visibleModal\r\n  const showCreateDocumentHandler = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  //selectRow\r\n  const docRowSelection = (selectedUser: any) => {\r\n    setSeletedDocument(selectedUser.id);\r\n  };\r\n\r\n \r\n\r\n\r\n  return (\r\n    <div className=\"document\">\r\n      <Button\r\n        type=\"primary\"\r\n        className=\"createDocument\"\r\n        onClick={showCreateDocumentHandler}\r\n      >\r\n        ایجاد مدارک\r\n      </Button>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          dataSource={dataDocument}\r\n          pagination={false}\r\n          columns={columns}\r\n          loading={isLoading ? true : false}\r\n          onRow={(record) => {\r\n            return {\r\n              onClick: () => {\r\n                docRowSelection(record);\r\n              },\r\n            };\r\n          }}\r\n          rowClassName={() => \"editable-row\"}\r\n        />\r\n        <Modal\r\n          title=\"ایجاد مدارک\"\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisible(false)}\r\n          onCancel={() => setVisible(false)}\r\n          width={500}\r\n        >\r\n          <CreateDocument \r\n             closeModal={() => setVisible(false)}    \r\n           />\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Document;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\RejectBaseInfoSeason\\RejectionInfoSeason.tsx",["179","180"],"import React, { useState} from \"react\";\r\nimport { useRejectAllBaseInfo, useDeletRejectBaseInfo } from \"../AdjustersHook\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Space,\r\n  Modal,\r\n  ConfigProvider,\r\n  Popconfirm,\r\n  Popover,\r\n} from \"antd\";\r\nimport CreateRejectionInfoSeason from \"./CreateRejectionInfoSeason\";\r\nimport edit from \"../../../assets/images/edit.svg\";\r\nimport trash from \"../../../assets/images/trash.svg\";\r\n\r\nconst RejectionSeason = () => {\r\n  const { data: RejectAllBaseInfo, isLoading } = useRejectAllBaseInfo();\r\n  const [remove] = useDeletRejectBaseInfo();\r\n  const [visible, setVisible] = useState(false);\r\n  const [addForm, setAddForm] = useState(false);\r\n  const [selectedSeason, setSelectedSeason] = useState(null);\r\n\r\n\r\n  //showData\r\n  let data = RejectAllBaseInfo?.result.map(\r\n    ({ id, title }: { id: number; title: string }) => {\r\n      let obj = {\r\n        title: title,\r\n        key: id,\r\n        id:id\r\n      };\r\n      return obj;\r\n    }\r\n  );\r\n\r\n  //removeRejectSeason\r\n  const removeRejectHandler = (id: number) => {\r\n    remove(id);\r\n  };\r\n\r\n  //addRejectSeason\r\n  const createRejectionInfoSeason = () => {\r\n    setAddForm(true);\r\n    setVisible(true);\r\n  };\r\n\r\n  //updateRejectSeason\r\n  const updateRejectSeason = (record: any) => {\r\n    console.log(record,typeof record ,\"record\")\r\n    setSelectedSeason(record);\r\n    setAddForm(false);\r\n    setVisible(true);\r\n  };\r\n  let columns = [\r\n    {\r\n      title: \"نام مستند\",\r\n      dataIndex: \"title\",\r\n    },\r\n\r\n    {\r\n      title: \"عملیات\",\r\n      dataIndex: \"عملیات\",\r\n      render: (text: any, record: any) => (\r\n        <Space size=\"middle\">\r\n          <div className=\"operations\">\r\n          <Popover content=\"ویرایش\" overlayClassName=\"popAction\">\r\n            <a className=\"action\" onClick={() => updateRejectSeason(record)}>\r\n             <img src={edit}  alt=\"edit\" />\r\n            </a>\r\n            </Popover>\r\n\r\n            {data.length >= 1 ? (\r\n              <Popconfirm\r\n                title=\"از حذف آیتم مورد نظر مطمئن هستید؟\"\r\n                onConfirm={() => removeRejectHandler(record?.key)}\r\n                okText=\"بله\"\r\n                cancelText=\"خیر\"\r\n              >\r\n                <Popover content=\"حذف\" overlayClassName=\"popAction\">\r\n                  <a className=\"action\">\r\n                   <img src={trash}  alt=\"trash\"  />\r\n                  </a>\r\n                </Popover>\r\n              </Popconfirm>\r\n            ) : null}\r\n          </div>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        type=\"primary\"\r\n        className=\"createDocument\"\r\n        onClick={createRejectionInfoSeason}\r\n      >\r\n        ایجاد دلایل رد\r\n      </Button>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          dataSource={data}\r\n          pagination={false}\r\n          columns={columns}\r\n          loading={isLoading ? true : false}\r\n          rowClassName={() => \"editable-row\"}\r\n        />\r\n\r\n        <Modal\r\n          title={addForm ? \"دلیل رد متقاضی\" : \"ویرایش رد متقاضی\"}\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => {\r\n            setVisible(false);\r\n          }}\r\n          onCancel={() => {\r\n            setVisible(false);\r\n          }}\r\n          width={500}\r\n        >\r\n          <CreateRejectionInfoSeason \r\n             closeModal={() => setVisible(false)} \r\n             selectedSeason={selectedSeason}\r\n             addForm={addForm}\r\n             />\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RejectionSeason;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Courses\\Courses.tsx",["181","182","183","184"],"import React, { useState, useEffect } from \"react\";\r\nimport { usePaginatedQuery } from \"react-query\";\r\nimport { api } from \"../../../httpServices/service\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Button,\r\n  Modal,\r\n  Pagination,\r\n  ConfigProvider,\r\n  Popconfirm,\r\n  Popover,\r\n} from \"antd\";\r\nimport \"./Courses.css\";\r\nimport moment from \"jalali-moment\";\r\nimport CreateCourse from \"./CreateCourse\";\r\nimport { useDeletCourse } from \"../AdjustersHook\";\r\nimport edit from \"../../../assets/images/edit.svg\";\r\nimport trash from \"../../../assets/images/trash.svg\";\r\nimport calendar from \"../../../assets/images/calendar.svg\";\r\n\r\nconst Courses = () => {\r\n  const [pageModel, setPageModel] = useState({\r\n    pageSize: 4,\r\n    current: 1,\r\n  });\r\n  const [visible, setVisible] = useState(false);\r\n  const [selectedCourse, setSelectedCourse] = useState({ id: \"\" });\r\n  const [itemCourse, setItemCourse] = useState(null);\r\n  const [addForm, setAddForm] = useState(false);\r\n\r\n  //removeCourse\r\n  const [remove] = useDeletCourse();\r\n\r\n  //apiRequestCoursePagination\r\n  const fetchCourses = (key: number, page = 1) =>\r\n    api.get(\r\n      `Course/all/paged?pageSize=${pageModel.pageSize}&pageNo=${pageModel.current}`\r\n    );\r\n\r\n  const { resolvedData, latestData } = usePaginatedQuery(\r\n    [\"projectsCourse\", pageModel.current],\r\n    fetchCourses\r\n  );\r\n\r\n  //createNewCourse\r\n  const showCreateCoursesHandler = () => {\r\n    setAddForm(true);\r\n    setVisible(true);\r\n  };\r\n\r\n  //changePage\r\n  const changePageHandler = (current: number) => {\r\n    setPageModel({\r\n      ...pageModel,\r\n      current: current,\r\n    });\r\n  };\r\n\r\n  //editCourse\r\n  const editCourseHandler = (id: any) => {\r\n    setSelectedCourse(id);\r\n    setVisible(true);\r\n    setAddForm(false);\r\n  };\r\n\r\n  //getSelectedCourse\r\n  useEffect(() => {\r\n    if (selectedCourse && selectedCourse.id !== \"\") {\r\n      api.get(`/course/${selectedCourse}`).then((res) => {\r\n        setItemCourse(res.data.result);\r\n      });\r\n    }\r\n  }, [selectedCourse]);\r\n\r\n  //removeCourse\r\n  const removeCourseHandler = (id: any) => {\r\n    setSelectedCourse(id);\r\n    remove(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"courses\">\r\n      <Button type=\"primary\" onClick={showCreateCoursesHandler}>\r\n        ایجاد دوره\r\n      </Button>\r\n      <Row gutter={16} className=\"gridCourses\">\r\n        {resolvedData?.data.result.map((course: any) => {\r\n          let classes = [\"\"];\r\n          switch (course?.courseType.id) {\r\n            case 1:\r\n              classes.push(\"actual\");\r\n              break;\r\n            case 2:\r\n              classes.push(\"iconlegal\");\r\n              break;\r\n            case 3:\r\n              classes.push(\"justice\");\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n\r\n          return (\r\n            <React.Fragment key={course.id}>\r\n              <Col span={11}>\r\n                <div className=\"card\">\r\n                  <div className=\"title\">\r\n                    <div>\r\n                      <span className={classes.join(\" \")}></span>\r\n                      <span>{`${course.title}  -  ${course.season.title}`}</span>\r\n                    </div>\r\n\r\n                    <div className=\"editable\">\r\n                      <Popconfirm\r\n                        title=\"از حذف آیتم مورد نظر مطمئن هستید؟\"\r\n                        onConfirm={() => removeCourseHandler(course.id)}\r\n                        okText=\"بله\"\r\n                        cancelText=\"خیر\"\r\n                      >\r\n                        <Popover content=\"حذف\" overlayClassName=\"popAction\">\r\n                          <a className=\"action\">\r\n                            <img src={trash} alt=\"trash\"/>\r\n                          </a>\r\n                        </Popover>\r\n                      </Popconfirm>\r\n                      <Popover content=\"ویرایش\" overlayClassName=\"popAction\">\r\n                        <a\r\n                          onClick={() => editCourseHandler(course.id)}\r\n                          className=\"action\"\r\n                        >\r\n                          <img src={edit} alt=\"edit\"/>\r\n                        </a>\r\n                      </Popover>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"date\">\r\n                    <div className=\"registerDate\">\r\n                      <img src={calendar} />\r\n                      <span className=\"time\"> شروع ثبت نام:</span>\r\n                      <span>\r\n                        {\" \"}\r\n                        {moment(course.registerOpenDate).format(\"jYYYY/jM/jD\")}\r\n                      </span>\r\n                    </div>\r\n\r\n                    <div className=\"registerDate\">\r\n                      <img src={calendar} />\r\n                      <span className=\"time\"> پایان ثبت نام :</span>\r\n                      <span>\r\n                        {moment(course.registerCloseDate).format(\"jYYYY/jM/jD\")}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Row>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Pagination\r\n          total={resolvedData?.data?.totalCount}\r\n          pageSize={pageModel.pageSize}\r\n          showTotal={(total, range) =>\r\n            `تعداد کل دوره ها:   ${latestData?.data.totalCount} `\r\n          }\r\n          current={pageModel.current}\r\n          onChange={(current: number) => changePageHandler(current)}\r\n          size=\"small\"\r\n        />\r\n        <Modal\r\n          title={addForm ? \"ایجاد دوره\" : \"ویرایش دوره\"}\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisible(false)}\r\n          onCancel={() => setVisible(false)}\r\n          width={900}\r\n        >\r\n          <CreateCourse\r\n            itemCourse={itemCourse}\r\n            addForm={addForm}\r\n            closeModal={() => setVisible(false)}\r\n          />\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Courses;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\SpecializedField\\SpecializedField.tsx",["185","186","187","188","189"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useGetSpecializedFeild,\r\n  useDeletFeild,\r\n  useGetSpecialzedFeildId,\r\n} from \"../AdjustersHook\";\r\nimport {\r\n  Table,\r\n  ConfigProvider,\r\n  Switch,\r\n  Button,\r\n  Popconfirm,\r\n  Space,\r\n  Modal,\r\n  Popover,\r\n  Form,\r\n} from \"antd\";\r\nimport CreateSpecialzedField from \"./createSpecialzedField\";\r\nimport edit from \"../../../assets/images/edit.svg\";\r\nimport trash from \"../../../assets/images/trash.svg\";\r\nimport \"./specializedField.css\";\r\n\r\nconst SpecializedField = () => {\r\n  const { data: specializedField, isLoading } = useGetSpecializedFeild();\r\n  console.log(specializedField, \"specializedFieldtest\");\r\n  const [feildId, setFeildId] = useState(0);\r\n  const { data: specializedFieldId } = useGetSpecialzedFeildId(feildId);\r\n  const [remove] = useDeletFeild();\r\n\r\n  // let specialzedFeildId={\r\n  //   title:specializedFieldId?.result.title,\r\n  //   isEnable:specializedFieldId?.result.isEnabled,\r\n  //   parent:specializedFieldId?.result.parent,\r\n  //   subFields:specializedFieldId?.result.subFields\r\n  // }\r\n  // console.log(specialzedFeildId,\"specialzedFeildId\")\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [addForm, setAddForm] = useState(false);\r\n\r\n  let data = specializedField?.result.map(\r\n    ({\r\n      id,\r\n      title,\r\n      isEnabled,\r\n      subFields,\r\n    }: {\r\n      id: number;\r\n      title: string;\r\n      isEnabled: boolean;\r\n      subFields: Array<number | boolean | string>;\r\n    }) => {\r\n      let obj = {\r\n        key: id,\r\n        title: title,\r\n        isEnabled: isEnabled,\r\n        children: subFields.map((item: any) => {\r\n          let subChild = {\r\n            key: item.id,\r\n            title: item.title,\r\n            isEnabled: item.isEnabled,\r\n          };\r\n          return subChild;\r\n        }),\r\n      };\r\n      return obj;\r\n    }\r\n  );\r\n\r\n  //romoveFeild\r\n  const removeFeildHandler = (id: number) => {\r\n    remove(id);\r\n  };\r\n\r\n  //editSpecializedFeild\r\n  const editSpecializedHandler = (id: number) => {\r\n    setVisible(true);\r\n    setAddForm(false);\r\n    setFeildId(id);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"رشته\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n    },\r\n\r\n    {\r\n      title: \"فعال/ غیرفعال\",\r\n      dataIndex: \"isEnabled\",\r\n      key: \"isEnabled\",\r\n      render: (value: boolean) =>\r\n        value ? (\r\n          <Switch\r\n            defaultChecked\r\n            checkedChildren=\"فعال\"\r\n            unCheckedChildren=\"غیر فعال\"\r\n            className=\"activity\"\r\n          />\r\n        ) : (\r\n          <Switch\r\n            checkedChildren=\"فعال\"\r\n            unCheckedChildren=\"غیر فعال\"\r\n            className=\"activity\"\r\n          />\r\n        ),\r\n    },\r\n    {\r\n      title: \"عملیات\",\r\n      dataIndex: \"عملیات\",\r\n      render: (text: any, record: any) => (\r\n        <Space size=\"middle\">\r\n          <div className=\"operations\">\r\n            <Popover content=\"ویرایش\" overlayClassName=\"popAction\">\r\n              <a\r\n                className=\"action\"\r\n                onClick={() => editSpecializedHandler(record?.key)}\r\n              >\r\n                <img src={edit}  alt=\"edit\" />\r\n              </a>\r\n            </Popover>\r\n\r\n            <Popconfirm\r\n              title={\r\n                specializedField.result.some(\r\n                  (feild: any) => feild.subFields.length > 0\r\n                )\r\n                  ? \"با حذف رشته مورد نظر همه زیرمجموعه ها حذف خواهند شد\"\r\n                  : \" از حذف رشته مورد نظر مطمین هستید؟\"\r\n              }\r\n              onConfirm={() => removeFeildHandler(record?.key)}\r\n              okText=\"بله\"\r\n              cancelText=\"خیر\"\r\n            >\r\n              <Popover content=\"حذف\" overlayClassName=\"popAction\">\r\n                <a className=\"action\">\r\n                  <img  src={trash} alt=\"trash\"/>\r\n                </a>\r\n              </Popover>\r\n            </Popconfirm>\r\n          </div>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  //rowSelection objects indicates the need for row selection\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: any, selectedRows: any) => {\r\n      console.log(\r\n        `selectedRowKeys: ${selectedRowKeys}`,\r\n        \"selectedRows: \",\r\n        selectedRows\r\n      );\r\n    },\r\n    onSelect: (record: any, selected: any, selectedRows: any) => {\r\n      console.log(record, selected, selectedRows);\r\n    },\r\n    onSelectAll: (selected: any, selectedRows: any, changeRows: any) => {\r\n      console.log(selected, selectedRows, changeRows);\r\n    },\r\n  };\r\n\r\n  //ModalSpecializedFeild\r\n  const createSpecializedFeild = () => {\r\n    setVisible(true);\r\n    setAddForm(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"feilds\">\r\n      <Button\r\n        type=\"primary\"\r\n        className=\"createDocument\"\r\n        onClick={createSpecializedFeild}\r\n      >\r\n        ایجاد رشته\r\n      </Button>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          columns={columns}\r\n          dataSource={data}\r\n        //  rowSelection={{ ...rowSelection }}\r\n          pagination={false}\r\n          loading={isLoading ? true : false}\r\n        />\r\n      </ConfigProvider>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Modal\r\n          title={addForm ? \"ایجاد رشته تخصصی\" : \"ویرایش رشته تخصصی\"}\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisible(false)}\r\n          onCancel={() => setVisible(false)}\r\n          width={600}\r\n        >\r\n          <CreateSpecialzedField\r\n            specializedFieldId={specializedFieldId}\r\n            addForm={addForm}\r\n            closeModal={() => setVisible(false)}\r\n          />\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpecializedField;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\Legal.tsx",["190"],"import React, { useState } from \"react\";\r\nimport  LegalCard  from   \"./LegalCard\";\r\nimport \"./Legal.css\";\r\n\r\ninterface Props {}\r\n\r\nlet allUsers = [\r\n  {\r\n    id: 1,\r\n    name: \"simin\",\r\n    familyName:\"Eftekhari\",\r\n    email:\"example@gmail.com\",\r\n    mobile:'09123654789', \r\n    phone:\"8325489\",   \r\n    code: \"14567\",\r\n    nathionalCode: 3258792534,\r\n    status: \"بررسی شده\",\r\n    period: \"تابستان 99\",\r\n    feild: \"بیمه بدنه و ثالث\",\r\n    adjustercode: \"123\",\r\n    fatherName: \"صابر\",\r\n    statusRead: \"خوانده نشده\",\r\n    FileDetails:\"عدم تایید\",\r\n    documents:\"عدم تایید\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"sara\",\r\n    familyName:\"Ahmadi\",\r\n    email:\"test@gmail.com\",\r\n    mobile:'09173654789', \r\n    phone:\"8325489\", \r\n    code: \"14568\",\r\n    nathionalCode: 4858792534,\r\n    status: \"بررسی نشده\",\r\n    period: \"تابستان 99\",\r\n    feild: \"بیمه بدنه و ثالث\",\r\n    adjustercode: \"123\",\r\n    fatherName: \"جعفر\",\r\n    statusRead: \"خوانده شده\",\r\n    FileDetails:\"عدم تایید\",\r\n    information:\"عدم تایید\",\r\n    documents:\"عدم تایید\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"ali\",\r\n    familyName:\"Amiri\",\r\n    email:\"alaki@gmail.com\",\r\n    mobile:'09153654789', \r\n    phone:\"9325489\", \r\n    code: \"14584\",\r\n    nathionalCode: 7958792534,\r\n    status: \"بررسی نشده\",\r\n    period: \"تابستان 99\",\r\n    feild: \"بیمه بدنه و ثالث\",\r\n    adjustercode: \"123\",\r\n    fatherName: \"احمد\",\r\n    statusRead: \"خوانده نشده\",\r\n    FileDetails:\"تایید\",\r\n    information:\"تایید\",\r\n    documents:\"تایید\"\r\n\r\n  },\r\n];\r\n\r\nconst Legal = (props: Props) => {\r\n  const [users, setUsers] = useState(allUsers);\r\n\r\n\r\n  return (\r\n    <div className=\"legal\">\r\n      {users.map((item) => {\r\n        return (\r\n         <LegalCard item={item}  key={item.id} />\r\n       \r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legal;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\DescriptionAdjusterFile\\DescriptionAdjusterFile.tsx",["191","192","193","194","195"],"import React, { useState, FC } from \"react\";\r\nimport { adjuster } from \"../../AdmissionOfficeList/interface-information\";\r\nimport { Row, Col, Popover, Modal, ConfigProvider, Select } from \"antd\";\r\n\r\ninterface DescriptionAdjuster {\r\n  item: adjuster;\r\n}\r\n\r\nconst DescriptionAdjusterFile: FC<DescriptionAdjuster> = ({ item }) => {\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\">\r\n        <Col span={24}>\r\n          <div className=\"content\">\r\n            <ul>\r\n              <li>\r\n                <h5>شماره شناسنامه</h5>\r\n                <span> ------ </span>\r\n              </li>\r\n              <li>\r\n                <h5>آدرس:</h5>\r\n                <span> {item.status} </span>\r\n              </li>\r\n              <li>\r\n                <h5>کد پستی:</h5>\r\n                <span>{item.period} </span>\r\n              </li>\r\n              <li>\r\n                <h5>تلفن :</h5>\r\n                <span>{item.period} </span>\r\n              </li>\r\n              <li>\r\n                <h5>تلفن همراه :</h5>\r\n                <span>{item.code} </span>\r\n              </li>\r\n              <li>\r\n                <h5>دین:</h5>\r\n                <span>{item.fatherName} </span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row justify=\"space-between\">\r\n        <Col span={24}>\r\n          <div className=\"content\">\r\n            <ul>\r\n              <li>\r\n                <h5>زمینه تخصصی</h5>\r\n                <span> ------ </span>\r\n              </li>\r\n              <li>\r\n                <h5>وضعیت خدمت:</h5>\r\n                <span> {item.status} </span>\r\n              </li>\r\n              <li>\r\n                <h5>شغل همسر:</h5>\r\n                <span>{item.period} </span>\r\n              </li>\r\n              <li>\r\n                <h5>مذهب :</h5>\r\n                <span>{item.period} </span>\r\n              </li>\r\n              <li>\r\n                <h5>تلفن همراه :</h5>\r\n                <span>{item.code} </span>\r\n              </li>\r\n              <li>\r\n                <h5>دین:</h5>\r\n                <span>{item.fatherName} </span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row justify=\"space-between\">\r\n        <Col span={24}>\r\n          <div className=\"content\">\r\n            <ul>\r\n              <li>\r\n                <h5>پست الکترونیکی:</h5>\r\n                <span> {item.email} </span>\r\n              </li>\r\n              <li>\r\n                <h5>نام دانشگاه:</h5>\r\n                <span> ---- </span>\r\n              </li>\r\n              <li>\r\n                <h5>معدل:</h5>\r\n                <span>{item.period} </span>\r\n              </li>\r\n              <li>\r\n                <h5>تاریخ:</h5>\r\n                <span>{item.period} </span>\r\n              </li>\r\n              <li>\r\n                <h5>تلفن همراه :</h5>\r\n                <span>{item.mobile} </span>\r\n              </li>\r\n              <li>\r\n                <h5>نام پدر</h5>\r\n                <span>{item.fatherName} </span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DescriptionAdjusterFile;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\CaseHistory\\CaseHistory.tsx",["196","197","198","199","200","201"],"import React, { useState, useEffect } from \"react\";\r\nimport { useAllDocument } from \"../../../Adjusters/AdjustersHook\";\r\nimport { Table, ConfigProvider, Radio, Button } from \"antd\";\r\nimport download from \"../../../../assets/images/download.svg\";\r\nimport ok from \"../../../../assets/images/ok.svg\";\r\nimport delet from \"../../../../assets/images/delet.svg\";\r\n\r\nfunction CaseHistory() {\r\n  const [value, setValue] = useState();\r\n  const { data: allDocuments, isLoading } = useAllDocument();\r\n  const [state, setState] = useState({\r\n    allDocuments: Array<any>(),\r\n  });\r\n  const [cheked, setCheked] = useState({\r\n    ok: true,\r\n    remove: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      allDocuments: allDocuments?.result?.map(\r\n        ({ id, title }: { id: number; title: string }) => {\r\n          return {\r\n            key: id,\r\n            id: id,\r\n            title: title,\r\n            mode: -1,\r\n          };\r\n        }\r\n      ),\r\n    }));\r\n    return () => {};\r\n  }, [allDocuments]);\r\n\r\n  const onChange = ( e: any, index: number) => {\r\n    // console.log(\"radio checked\", e.target.value,e,);\r\n    setState(prev => ({\r\n      ...prev,\r\n      allDocuments: prev.allDocuments.map((doc: any, ind: number) => {\r\n        if (index === ind) {\r\n          return {\r\n            ...doc,\r\n            mode: +e.target.value\r\n          }\r\n        }\r\n        return doc;\r\n      })\r\n    }))\r\n  };\r\n\r\n\r\n  const onChangeAll = (e: any) => {\r\n    const mode = +e.target.value;\r\n    setState(prev => ({\r\n      ...prev,\r\n      allDocuments: prev.allDocuments.map((doc: any) => ({\r\n        ...doc,\r\n        mode\r\n      }))\r\n    }))\r\n  };\r\n\r\n\r\n  let columns = [\r\n    {\r\n      title: \"شرکت\",\r\n      dataIndex: \"company\",\r\n    },\r\n    {\r\n      title: \"تاریخ شروع\",\r\n      dataIndex: \"starDate\",\r\n    },\r\n    {\r\n      title: \"تاریخ پایان\",\r\n      dataIndex: \"endDate\",\r\n    },\r\n    {\r\n      title: \"سمت\",\r\n      dataIndex: \"post\",\r\n    },\r\n    {\r\n      title: \"نوع فعالیت\",\r\n      dataIndex: \"activity\",\r\n    },\r\n    // {\r\n    //     title: \"وضعیت\",\r\n    //     dataIndex: \"status\",\r\n    //     render: (value: boolean) => cheked.remove ? <img src={ok} alt=\"ok\"  />\r\n    //     : <img  src={delet} alt=\"delet\"/>,\r\n    // },\r\n    {\r\n      title: (\r\n        <Radio.Group onChange={onChangeAll} value={value}>\r\n          <Radio value={0}>رد</Radio>\r\n          <Radio value={1}>تایید</Radio>\r\n        </Radio.Group>\r\n      ),\r\n      dataIndex: \"mode\",\r\n      key: \"mode\",\r\n      render: (value: number, record: any, index: any) => (\r\n        <Radio.Group  onChange={(e) => onChange(e, index)} value={value}>\r\n          <Radio value={0}>رد</Radio>\r\n          <Radio value={1}>تایید</Radio>\r\n        </Radio.Group>\r\n      ),\r\n    },\r\n\r\n    {\r\n      title: \"دلیل رد\",\r\n      dataIndex: \"reject\",\r\n    },\r\n\r\n    {\r\n      title: \"مدارک و سوابق\",\r\n      dataIndex: \"adjusterType\",\r\n      className: \"adjusterRequire\",\r\n      render: () => (\r\n        <a>\r\n          <img src={download} alt=\"download\" />\r\n        </a>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  //rowSelection objects indicates the need for row selection\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: any, selectedRows: any) => {\r\n      console.log(\r\n        `selectedRowKeys: ${selectedRowKeys}`,\r\n        \"selectedRows: \",\r\n        selectedRows\r\n      );\r\n    },\r\n    onSelect: (record: any, selected: any, selectedRows: any) => {\r\n      console.log(record, selected, selectedRows);\r\n    },\r\n    onSelectAll: (selected: any, selectedRows: any, changeRows: any) => {\r\n      console.log(selected, selectedRows, changeRows);\r\n    },\r\n  };\r\n  return (\r\n    <div className=\"documentAdmissionList\">\r\n      <Button className=\"download\">دانلود همه</Button>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          dataSource={state.allDocuments}\r\n          pagination={false}\r\n          columns={columns}\r\n          loading={isLoading ? true : false}\r\n          rowSelection={{ ...rowSelection }}\r\n        />\r\n        <Button type=\"primary\" className=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CaseHistory;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\InformationAdjuster\\InformationAdjuster.tsx",["202","203","204","205","206","207","208","209","210","211"],"import React, { FC, useEffect, useState } from \"react\";\r\nimport { Row, Col, Button, Modal, ConfigProvider, Select } from \"antd\";\r\n import { adjuster } from \"../../interface-information\";\r\nimport DetermineStatus from \"../../../FileDetail/DetermineStatus/DetermineStatus\";\r\nimport person from \"../../../../assets/images/person.svg\";\r\nimport interviewTime from \"../../../../assets/images/interviewTime.svg\";\r\nimport score from \"../../../../assets/images/scoreboard.svg\";\r\nimport addUser from \"../../../../assets/images/addUser.svg\";\r\nimport remove from \"../../../../assets/images/remove.svg\";\r\nimport certificate from \"../../../../assets/images/certificate.svg\";\r\nimport email from \"../../../../assets/images/email.svg\";\r\nimport pdf from \"../../../../assets/images/pdf.svg\";\r\nimport \"./InformationAdjuster.css\";\r\nimport {\r\n  useAllInterviewer,\r\n  useGetInterviewTime,\r\n} from \"../../../Adjusters/AdjustersHook\";\r\nimport ScoreBoard from \"../ScoreBoard/ScoreBoard\";\r\nimport moment from \"jalali-moment\";\r\n\r\ninterface IdName {\r\n  id: number;\r\n  familyName: string;\r\n}\r\n\r\nenum ViewType {\r\n  showIcon,\r\n  showSelect,\r\n  showText,\r\n}\r\n\r\ninterface InformationAdjuster {\r\n  item: adjuster;\r\n  closeFileDetail: () => void;\r\n}\r\n\r\nconst { Option } = Select;\r\nconst style = { height: \"100%\", padding: \"8px 0\" };\r\nconst InformationAdjuster: FC<InformationAdjuster> = ({\r\n  item,\r\n  closeFileDetail,\r\n}) => {\r\n  const [visibleStatus, setVisibleStatus] = useState(false);\r\n  const { data: allInterviewer, isLoading } = useAllInterviewer();\r\n  const [showHidden, setShowHidden] = useState({\r\n    showInterviewer: ViewType.showIcon,\r\n  });\r\n  const [textSearch, setTextSearch] = useState(\"\");\r\n  const [selectedItems, setSelectedItems] = useState({\r\n    selectedInterviewer: Array<IdName>(),\r\n  });\r\n\r\n  const [visibleScore, setVisibleScore] = useState(false);\r\n\r\n  //showModalDetermineStatus\r\n  const determineStatusHandler = () => {\r\n    setVisibleStatus(true);\r\n    closeFileDetail();\r\n  };\r\n\r\n  const addUserHandler = () => {\r\n    setShowHidden((prev) => ({\r\n      ...prev,\r\n      showInterviewer: ViewType.showSelect,\r\n    }));\r\n  };\r\n\r\n  //searchInterviewer\r\n  const onSearch = (value: string) => {\r\n    setTextSearch(value);\r\n  };\r\n\r\n  //blurInputInterviewer\r\n  const onBlur = () => {\r\n    setShowHidden((prev) => ({\r\n      ...prev,\r\n      showInterviewer: ViewType.showText,\r\n    }));\r\n  };\r\n\r\n  //changeInterviewer\r\n  const onChangeInterviewer = (ids: number[]) => {\r\n    setSelectedItems((prev) => ({\r\n      ...prev,\r\n      selectedInterviewer: allInterviewer.result.filter((interviewer: IdName) =>\r\n        ids.some((id) => id === interviewer.id)\r\n      ),\r\n    }));\r\n  };\r\n\r\n  //removeInterviewerWhenClickOnRemoveIcon\r\n  const removeHandler = (item: IdName) => {\r\n    if (\r\n      selectedItems.selectedInterviewer.length === 1 ||\r\n      textSearch.length > 0\r\n    ) {\r\n      setShowHidden((prev) => ({\r\n        ...prev,\r\n        showInterviewer: ViewType.showIcon,\r\n      }));\r\n    }\r\n    setSelectedItems((prev) => ({\r\n      ...prev,\r\n      selectedInterviewer: prev.selectedInterviewer.filter((it) => item !== it),\r\n    }));\r\n  };\r\n\r\n  //showModalSubmitScore\r\n  const submitScoreHandler = () => {\r\n    setVisibleScore(true);\r\n    closeFileDetail()\r\n  };\r\n\r\n  //getStart&EndMonth\r\n  let startMonth = moment().locale(\"fa\").startOf(\"month\").format(\"YYYY/M/D\");\r\n  let endMonth = moment().locale(\"fa\").endOf(\"month\").format(\"YYYY/M/D\");\r\n \r\n\r\n  let fromDate = moment(startMonth, \" jYYYY/jM/jD HH:mm\")\r\n    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n    .replace(/ /g, \"T\");\r\n  let toDate = moment(endMonth, \"jYYYY/jM/jD HH:mm\")\r\n    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n    .replace(/ /g, \"T\");\r\n  const { data: interviewTimer } = useGetInterviewTime(fromDate, toDate);\r\n  \r\n\r\nlet setTime=interviewTimer?.result.map((time:any)=>{\r\n  let obj={\r\n    id:time.id,\r\n    startTime:time.startTime,\r\n    endTime:time.endTime\r\n  }\r\n  return obj\r\n\r\n})\r\n\r\nconsole.log(setTime,\"setTime\")\r\n\r\n  return (\r\n    <div className=\"informationAdjuester\">\r\n      <div className=\"titleInfoAdjuster\">\r\n        <div>\r\n          <p>فرستنده:----</p>\r\n          <p>گیرنده:----</p>\r\n        </div>\r\n        <div className=\"btnDetermineStatus\">\r\n          <a className=\"pdf\">\r\n            <img src={pdf} alt=\"pdf\" />\r\n          </a>\r\n          <Button type=\"primary\" onClick={determineStatusHandler}>\r\n            تعیین وضعیت\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <h2>مشخصات متقاضی آزمون ارزیابی</h2>\r\n      <Row>\r\n        <Col xs={2} sm={4} md={6} lg={8} xl={3}>\r\n          <img src={person} alt=\"person\" />\r\n        </Col>\r\n        <Col xs={20} sm={16} md={12} lg={8} xl={10}>\r\n          <Row>\r\n            <Col xs={2} sm={4} md={6} lg={8} xl={8}>\r\n              <h5>کد رهگیری:</h5>\r\n              <span> {item?.code} </span>\r\n            </Col>\r\n            <Col xs={20} sm={16} md={12} lg={8} xl={8}>\r\n              <h5>نام و نام خانوادگی:</h5>\r\n              <span> {item?.name} </span>\r\n            </Col>\r\n            <Col xs={2} sm={4} md={6} lg={8} xl={8}>\r\n              <h5>نام پدر:</h5>\r\n              <span> {item?.fatherName} </span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"part2\">\r\n            <Col xs={2} sm={4} md={6} lg={8} xl={8}>\r\n              <h5>کد ملی:</h5>\r\n              <span> {item?.nathionalCode} </span>\r\n            </Col>\r\n            <Col xs={20} sm={16} md={12} lg={8} xl={8}>\r\n              <h5>تاریخ تولد:</h5>\r\n              <span> ------ </span>\r\n            </Col>\r\n            <Col xs={2} sm={4} md={6} lg={8} xl={8}>\r\n              <h5>شهر محل تولد:</h5>\r\n              <span> ---- </span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col xs={2} sm={4} md={6} lg={8} xl={11}>\r\n          <div style={style}>\r\n            <ul className=\"detailFile\">\r\n              <li>\r\n                <h5>تاریخ و ساعت مصاحبه</h5>\r\n                <a>\r\n                  {\" \"}\r\n                  <img src={interviewTime} alt=\"interviewTime\" />\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <h5>مصاحبه کننده/ مصاحبه کنندگان</h5>\r\n\r\n                {showHidden.showInterviewer === ViewType.showIcon ? (\r\n                  <a onClick={addUserHandler}>\r\n                    <img\r\n                      src={addUser}\r\n                      alt=\"addUser\"\r\n                      className=\"addInterviewer\"\r\n                    />\r\n                  </a>\r\n                ) : showHidden.showInterviewer === ViewType.showText ? (\r\n                  <div className=\"removeInterviewer\">\r\n                    <div>\r\n                      {(\r\n                        <span>\r\n                          {textSearch} <img src={remove} alt=\"remove\" />{\" \"}\r\n                        </span>\r\n                      ) &&\r\n                        selectedItems.selectedInterviewer.map((item) => (\r\n                          <div style={{ display: \"flex\", paddingTop: \"5px\" }}>\r\n                            {item.familyName}\r\n                            <a onClick={() => removeHandler(item)}>\r\n                              <img src={remove} alt=\"remove\" />\r\n                            </a>\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <Select\r\n                    showSearch\r\n                    style={{ width: \"200px\" }}\r\n                    placeholder=\"انتخاب کنید\"\r\n                    optionFilterProp=\"children\"\r\n                    onSearch={onSearch}\r\n                    mode=\"multiple\"\r\n                    onChange={onChangeInterviewer}\r\n                    onBlur={onBlur}\r\n                    loading={isLoading ? true : false}\r\n                    allowClear\r\n                  >\r\n                    {allInterviewer?.result?.map(\r\n                      (interviewer: { id: number; familyName: string }) => (\r\n                        <Option key={interviewer.id} value={interviewer.id}>\r\n                          {interviewer.familyName}\r\n                        </Option>\r\n                      )\r\n                    )}\r\n                  </Select>\r\n                )}\r\n              </li>\r\n              <li onClick={submitScoreHandler}>\r\n                <h5>ثبت نمره</h5>\r\n                <a>\r\n                  <img src={score} alt=\"score\" />\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <h5>پروانه ارزیاب</h5>\r\n                <a>\r\n                  <img src={certificate} alt=\"certificate\" />\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <h5>نامه چارگون</h5>\r\n                <a>\r\n                  <img src={email} alt=\"email\" />\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Modal\r\n          title=\"تعیین وضعیت\"\r\n          visible={visibleStatus}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisibleStatus(false)}\r\n          onCancel={() => setVisibleStatus(false)}\r\n          width={500}\r\n          centered\r\n        >\r\n          {visibleStatus && (\r\n            <DetermineStatus\r\n              item={item}\r\n              closeModal={() => setVisibleStatus(false)}\r\n            />\r\n          )}\r\n        </Modal>\r\n\r\n        <Modal\r\n          title={`ثبت نمره ${item.name + \"\" + item.familyName}`}\r\n          visible={visibleScore}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisibleScore(false)}\r\n          onCancel={() => setVisibleScore(false)}\r\n          width={900}\r\n        >\r\n          {visibleScore && (\r\n            <ScoreBoard item={item} allInterviewer={allInterviewer} />\r\n          )}\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InformationAdjuster;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\Documents\\Documents.tsx",["212","213"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAllDocument } from \"../../../Adjusters/AdjustersHook\";\r\nimport { Table, ConfigProvider, Radio, Button } from \"antd\";\r\nimport download from \"../../../../assets/images/download.svg\";\r\nimport \"./Document.css\";\r\n\r\nfunction Documents() {\r\n  const [value, setValue] = useState([{ checked: \"\" }]);\r\n  console.log(value,'value' , typeof  value)\r\n  const { data: allDocuments, isLoading } = useAllDocument();\r\n  const [state, setState] = useState({\r\n    allDocuments: Array<any>()\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      allDocuments: allDocuments?.result?.map(\r\n        ({ id, title }: { id: number; title: string }) => {\r\n          return {\r\n            key: id,\r\n            id: id,\r\n            title: title,\r\n            mode: -1,\r\n          };\r\n    \r\n        }\r\n      )\r\n    }))\r\n    return () => {}\r\n  }, [allDocuments])\r\n  \r\n\r\n  //changeRadioButton\r\n  const onChange = ( e: any, index: number) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      allDocuments: prev.allDocuments.map((doc: any, ind: number) => {\r\n        if (index === ind) {\r\n          return {\r\n            ...doc,\r\n            mode: +e.target.value\r\n          }\r\n        }\r\n        return doc;\r\n      })\r\n    }))\r\n  };\r\n\r\n//changeAllRadioButton\r\n  const onChangeAll = (e: any) => {\r\n    const mode = +e.target.value;\r\n    setState(prev => ({\r\n      ...prev,\r\n      allDocuments: prev.allDocuments.map((doc: any) => ({\r\n        ...doc,\r\n        mode\r\n      }))\r\n    }))\r\n  };\r\n\r\n  let columns = [\r\n    {\r\n      title: \"نام مستند\",\r\n      dataIndex: \"title\",\r\n      width: \"40%\",\r\n      key: \"title\",\r\n      \r\n    },\r\n\r\n    {\r\n      title: \"دریافت فایل\",\r\n      dataIndex: \"adjusterType\",\r\n      className: \"adjusterRequire\",\r\n      key: \"adjusterType\",\r\n      render: () => (\r\n        <a>\r\n          <img src={download} alt=\"download\" />\r\n        </a>\r\n      ),\r\n    },\r\n\r\n    {\r\n      title: (\r\n        <Radio.Group onChange={onChangeAll} value={value}>\r\n          <Radio value={0}>رد</Radio>\r\n          <Radio value={1}>تایید</Radio>\r\n        </Radio.Group>\r\n      ),\r\n      dataIndex: \"mode\",\r\n      key: \"mode\",\r\n      render: (value: number, record: any, index: any) => (\r\n        <Radio.Group\r\n          onChange={(e) => onChange(e, index)}\r\n          value={value}\r\n          name={`radiogroup-${index}`}\r\n        >\r\n          <Radio value={0} >رد</Radio>\r\n          <Radio value={1}>تایید</Radio>\r\n        </Radio.Group>\r\n      ),\r\n    },\r\n\r\n    {\r\n      title: \"دلیل رد\",\r\n      dataIndex: \"reject\",\r\n      key: \"reject\",\r\n    },\r\n  ];\r\n\r\n  //rowSelection objects indicates the need for row selection\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: any, selectedRows: any) => {\r\n      console.log(\r\n        `selectedRowKeys: ${selectedRowKeys}`,\r\n        \"selectedRows: \",\r\n        selectedRows,\r\n        \"dani\"\r\n      );\r\n    },\r\n    onSelect: (record: any, selected: any, selectedRows: any) => {\r\n      console.log(record, selected, selectedRows, \"arti\");\r\n    },\r\n    onSelectAll: (selected: any, selectedRows: any, changeRows: any) => {\r\n      console.log(selected, selectedRows, changeRows, \"simin\");\r\n    },\r\n  };\r\n  return (\r\n    <div className=\"documentAdmissionList\">\r\n      <Button className=\"download\">دانلود همه</Button>\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          dataSource={state.allDocuments}\r\n          pagination={false}\r\n          columns={columns}\r\n          loading={isLoading ? true : false}\r\n          rowSelection={{ ...rowSelection }}\r\n        />\r\n        <Button type=\"primary\" className=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Documents;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\InterviewTime\\InterviewTime.jsx",["214","215","216","217","218","219","220"],"import React, { useState } from \"react\";\r\nimport { PersianCalendar, Views } from \"react-big-calendar-forked-persian\";\r\n//import 'react-big-calendar-forked-persian/lib/css/react-big-calendar.css';\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport \"react-big-calendar-forked-persian/lib/css/react-big-calendar.css\";\r\nimport { Button, Modal, ConfigProvider, Popconfirm, Select } from \"antd\";\r\nimport CreateInterviewTime from \"./CreateInterviewTime\";\r\nimport {\r\n  useGetInterviewTime,\r\n  useDeletInterviewTime,\r\n  useAllCourseAvailable,\r\n} from \"../AdjustersHook\";\r\nimport moment from \"jalali-moment\";\r\nimport \"./interviewTime.css\";\r\n\r\nimport withDragAndDrop from \"react-big-calendar-forked-persian/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar-forked-persian/lib/addons/dragAndDrop/styles.css\";\r\nconst DnDCalendar = withDragAndDrop(PersianCalendar);\r\n\r\nconst { Option } = Select;\r\nconst MyCalendar = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [selectedCourse, setSelectedCourse] = useState(null);\r\n  const [selectTimeInterView, setSelectTimeInterView] = useState(null)\r\n  const [addForm, setAddForm] = useState(false)\r\n\r\n  const { data: coursesAvailable,isLoading } = useAllCourseAvailable();\r\n\r\n  //createNewInterviewerTimer\r\n  const createInterviewerTime = () => {\r\n    setVisible(true);\r\n  };\r\n  \r\n\r\n//getStart&EndMonth\r\nlet startMonth= moment().locale('fa').startOf('month') .format('YYYY/M/D');\r\nlet endMonth= moment().locale('fa').endOf('month') .format('YYYY/M/D');\r\n\r\n\r\n\r\n\r\n  let fromDate = moment(startMonth, \" jYYYY/jM/jD HH:mm\")\r\n    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n    .replace(/ /g, \"T\");\r\n  let toDate = moment(endMonth, \"jYYYY/jM/jD HH:mm\")\r\n    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n    .replace(/ /g, \"T\");\r\n  const { data: interviewTime } = useGetInterviewTime(fromDate, toDate);\r\n\r\n  //removeInterviewTime\r\n  const [remove] = useDeletInterviewTime();\r\n\r\n\r\n  //getInterviewTime for CourseId\r\n  let interviewTimeForCourseId = interviewTime?.result?.filter(\r\n    (intTime) => intTime.course.id == selectedCourse\r\n  );\r\n\r\n  //showInterviewerTimeforCourseId\r\n  let events =\r\n    interviewTimeForCourseId &&\r\n    interviewTimeForCourseId.map((interview) => {\r\n      let obj = {\r\n        id: interview.id,\r\n        title:\r\n          interview.course.courseType.title +\r\n          \" \" +\r\n          interview.course.season.title,\r\n        start: moment(interview.startTime).toDate(),\r\n        end: moment(interview.endTime).toDate(),\r\n      };\r\n      return obj;\r\n    });\r\n\r\n  //removeInterviewTime\r\n  const removeItem = (id) => {\r\n    remove(id);\r\n  };\r\n\r\n  //updateItem\r\n  const updateItem = (event) => {\r\n    setSelectTimeInterView(event)\r\n    setVisible(true);\r\n  };\r\n\r\n\r\n  const resizeEvent = ({ event, start, end }) => {\r\n    // console.log({ event, start, end });\r\n  };\r\n\r\n  const MonthEvent = ({ event }) => {\r\n    return (\r\n      <div>\r\n        <div className=\"event\">\r\n          <span>\r\n            {moment(event.start, \"YYYY-M-D HH:mm\").format(\" HH:mm\")} -\r\n            {moment(event.end, \"YYYY-M-D HH:mm\").format(\" HH:mm\")}\r\n          </span>\r\n          <div className=\"operations\">\r\n            <a onClick={() => updateItem(event)}>\r\n              <EditOutlined style={{ color: \"#ffffff\" }} />\r\n            </a>\r\n            <Popconfirm\r\n              title=\"از حذف آیتم مورد نظر مطمئن هستید؟\"\r\n              onConfirm={() => removeItem(event.id)}\r\n              okText=\"بله\"\r\n              cancelText=\"خیر\"\r\n            >\r\n              <a>\r\n                <DeleteOutlined style={{ color: \"#ffffff\" }} />\r\n              </a>\r\n            </Popconfirm>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    //console.log(`selected ${value}`);\r\n    setSelectedCourse(value);\r\n  };\r\n\r\n  const onEventResize = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  const onEventDrop = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className=\"interviewTime\">\r\n      <div className=\"coursesPeriod\">\r\n        <label>دوره مصاحبه </label>\r\n        <Select\r\n          placeholder=\"انتخاب کنید\"\r\n          style={{ width: \"200px\" }}\r\n          onChange={handleChange}\r\n          loading={isLoading?true:false}\r\n        >\r\n          {coursesAvailable?.result.map(({ title, id }) => {\r\n            return (\r\n              <Option key={id} value={id} >\r\n                {title}\r\n              </Option>\r\n            );\r\n          })}\r\n        </Select>\r\n      </div>\r\n     \r\n      <Button\r\n        type=\"primary\"\r\n        onClick={createInterviewerTime}\r\n        className=\"createButton\"\r\n        disabled={selectedCourse?false:true}\r\n        \r\n      >\r\n        ایجاد زمان مصاحبه\r\n      </Button>\r\n\r\n      <DnDCalendar\r\n        events={events}\r\n        className=\"schadular\"\r\n        defaultView={Views.WEEK}\r\n        selectable\r\n        resizable\r\n        onEventDrop={onEventDrop}\r\n        onEventResize={onEventResize}\r\n        components={{\r\n          event: MonthEvent,\r\n        }}\r\n      />\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Modal\r\n          title=\"ایجاد زمان مصاحبه\"\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisible(false)}\r\n          onCancel={() => setVisible(false)}\r\n          width={800}\r\n        >\r\n          <CreateInterviewTime\r\n            visible={visible}\r\n            closeModal={() => setVisible(false)}\r\n            addForm={addForm}\r\n            selectTimeInterView={selectTimeInterView}\r\n            selectedCourse={selectedCourse}\r\n          />\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCalendar;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\AdjustersServices.js",[],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\httpServices\\service.js",[],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\interviewers\\createInterviewer.tsx",["221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Select, Radio, Button, Row, Col, Input, Upload } from \"antd\";\r\nimport { Interviewers } from \"../interfaceAdjusters\";\r\nimport {\r\n  useCreateInterviewer,\r\n  useInterviewerId,\r\n  useUpdateInterviewer,\r\n  useAllBanks,\r\n} from \"../AdjustersHook\";\r\nimport \"./Interviewers.css\";\r\nimport { api } from \"../../../httpServices/service\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface interviewerInfoProps {\r\n  itemUser?: any;\r\n  addForm?: boolean;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst CreateInterviewer: React.FC<interviewerInfoProps> = ({\r\n  itemUser,\r\n  addForm,\r\n  closeModal,\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const [file, setFile] = useState(\"\");\r\n\r\n  let interviewrId = itemUser?.id;\r\n  const [interviewer, setInterviewer] = useState<Interviewers>({\r\n    firstName: \"\",\r\n    familyName: \"\",\r\n    degreeId: 0,\r\n    nationalCode: \"\",\r\n    bankId: 0,\r\n    phone: \"\",\r\n    sheba: \"\",\r\n  });\r\n\r\n  const [\r\n    CreateInterviewer,\r\n    { status, data, isError, error },\r\n  ] = useCreateInterviewer();\r\n  //const { data: interviewerId } = useInterviewerId(EncId)\r\n  //console.log(interviewerId,\"interviewerId\")\r\n  //const [updateInterviewer] = useUpdateInterviewer();\r\n  const { data: banks, isLoading } = useAllBanks();\r\n\r\n  const onFinish = (values: any) => {\r\n    // console.log(\"Received values of form interviewer: \", values);\r\n    let formData = new FormData();\r\n    formData.append(\"firstName\", values.firstName);\r\n    formData.append(\"familyName\", values.familyName);\r\n    formData.append(\"nationalCode\", values.nationalCode);\r\n    formData.append(\"degree.id\", values.degreeId);\r\n    formData.append(\"bank.id\", values.bankId);\r\n    formData.append(\"phone\", values.phone);\r\n    formData.append(\"sheba\", values.sheba);\r\n    formData.append(\"file\", file);\r\n\r\n    let tt = {\r\n      firstName: values.firstName,\r\n      familyName: values.familyName,\r\n      nationalCode: values.nationalCode,\r\n      degree: values.degreeId,\r\n      bank: values.bankId,\r\n      phone: values.phone,\r\n      sheba: values.sheba,\r\n      file: file,\r\n    };\r\n\r\n    if (!addForm) {\r\n      //updateInterviewer({interviewrId,tt})\r\n      api.put(`/interviewer/${interviewrId}`, formData);\r\n    } else {\r\n      CreateInterviewer(formData);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    addForm\r\n      ? form.resetFields()\r\n      : form.setFieldsValue({\r\n          firstName: itemUser && itemUser.firstName,\r\n          familyName: itemUser && itemUser?.familyName,\r\n          nationalCode: itemUser && itemUser?.nationalCode,\r\n          degreeId: itemUser && itemUser?.degree.id,\r\n          bankId: itemUser && itemUser?.bank.Id,\r\n          phone: itemUser && itemUser?.phone,\r\n          sheba: itemUser && itemUser.sheba,\r\n        });\r\n  }, [itemUser, addForm]);\r\n\r\n  //handle Close Modal\r\n  useEffect(() => {\r\n    if (status == \"success\") closeModal();\r\n  }, [status]);\r\n\r\n  //uploadImage\r\n  const handleUpload = (event: any) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const ImageThumb = ({ image }: any) => {\r\n    return (\r\n      <img\r\n        src={URL.createObjectURL(image)}\r\n        alt={image.name}\r\n        style={{ width: \"100px\", height: \"100px\" }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"createInterViewer\">\r\n      <Form name=\"InterViewer\" onFinish={onFinish} form={form}>\r\n        <Row>\r\n          <Col span={12}>\r\n            <Form.Item\r\n              name=\"upload\"\r\n              label=\"بارگزاری تصویر\"\r\n              valuePropName=\"fileList\"\r\n              //getValueFromEvent={normFile}\r\n              extra=\"حداکثر 500 کیلو بایت و با فرمت jpg\"\r\n              labelCol={{ span: 4 }}\r\n            >\r\n              <div>\r\n                <div>\r\n                  {file ? (\r\n                    <ImageThumb image={file} />\r\n                  ) : (\r\n                    <div className=\"upload-box\">\r\n                      <svg\r\n                        width=\"128\"\r\n                        height=\"128\"\r\n                        viewBox=\"0 0 128 128\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                      >\r\n                        <path\r\n                          d=\"M127.92 124.688L124.72 111.888C123.202 105.678 118.599 100.685 112.533 98.6667L89.0665 90.848C83.3438 88.464 80.7253 79.248 80.1598 75.7493C84.5203 72.1233 87.326 66.9642 87.9998 61.3332C87.9035 60.3715 88.1305 59.405 88.645 58.5865C89.4765 58.3782 90.1573 57.7827 90.4743 56.9865C92.0098 53.2685 92.9735 49.3395 93.333 45.3332C93.3338 45.1155 93.307 44.8987 93.253 44.688C92.871 43.1312 91.9558 41.7575 90.6663 40.8052V26.6665C90.6663 18.0745 88.0423 14.5492 85.2795 12.5065C84.752 8.368 80.32 0 64 0C49.5207 0.583 37.9162 12.1875 37.3332 26.6667V40.8055C36.0437 41.7577 35.1285 43.1315 34.7465 44.6883C34.6925 44.899 34.6657 45.116 34.6665 45.3335C35.0255 49.3418 35.9892 53.2725 37.5252 56.9922C37.7562 57.746 38.362 58.3257 39.1252 58.523C39.424 58.6722 39.984 59.4457 39.984 61.3337C40.6618 66.9808 43.4837 72.1515 47.8667 75.7765C47.3067 79.2697 44.704 88.4805 39.1415 90.8057L15.4667 98.667C9.406 100.685 4.806 105.673 3.2855 111.878L0.0854965 124.678C-0.276753 126.105 0.586747 127.556 2.01425 127.919C2.2275 127.973 2.44675 128 2.66675 128.001H125.334C126.806 128 128 126.806 127.999 125.333C127.999 125.115 127.973 124.899 127.92 124.688Z\"\r\n                          fill=\"#455A64\"\r\n                          fill-opacity=\"0.1\"\r\n                        />\r\n                      </svg>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <input type=\"file\" onChange={handleUpload} />\r\n              </div>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Form.Item\r\n              label=\"نام\"\r\n              name=\"firstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"نام الزامی می باشد\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input name=\"firstName\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"نام خانوادگی\"\r\n              name=\"familyName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"نام خانوادگی الزامی می باشد\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input name=\"familyName\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"کدملی\"\r\n              name=\"nationalCode\"\r\n              className=\"changeMargin\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"کدملی الزامی می باشد.\",\r\n                },\r\n                {\r\n                  pattern: /^\\d{10}$/,\r\n                  message: \"کدملی وارد شده صحیح نمی باشد.\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input name=\"nationalCode\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"شماره شبا\"\r\n              name=\"sheba\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"شماره شبا الزامی می باشد\",\r\n                },\r\n                {\r\n                  pattern: /^\\d{24}$/,\r\n                  message: \"شماره شبا باید حداقل و حداکثر 24 رقم باشد\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input name=\"sheba\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"شماره تلفن\"\r\n              name=\"phone\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"شماره تلفن الزامی می باشد\",\r\n                },\r\n                {\r\n                  pattern: /(0|\\+98|0098)?9[0123][0-9]{8}/,\r\n                  message: \"شماره همراه وارد شده صحیح نمی باشد.\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input name=\"phone\" />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col span={10}>\r\n            <Form.Item\r\n              name=\"degreeId\"\r\n              label=\"مدرک تحصیلی\"\r\n              className=\"changeMargin\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"انتخاب مدرک تحصیلی الزامی می باشد\",\r\n                },\r\n              ]}\r\n            >\r\n              <Radio.Group>\r\n                <Radio.Button value=\"0\">دیپلم</Radio.Button>\r\n                <Radio.Button value=\"1\">فوق دیپلم</Radio.Button>\r\n                <Radio.Button value=\"2\">لیسانس</Radio.Button>\r\n                <Radio.Button value=\"3\">فوق لیسانس</Radio.Button>\r\n                <Radio.Button value=\"4\">دکتری</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col span={10}>\r\n            <Form.Item\r\n              name=\"bankId\"\r\n              label=\"نام بانک\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"انتخاب نام بانک الزامی می باشد\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select style={{ width: \"436px\" }} placeholder=\"انتخاب نمایید\">\r\n                {banks?.Result?.map(\r\n                  ({ Id, Title }: { Id: number; Title: string }) => (\r\n                    <Option key={Id} value={Id}>\r\n                      {Title}\r\n                    </Option>\r\n                  )\r\n                )}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateInterviewer;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Documents\\createDocument.tsx",["234","235","236","237","238","239","240","241","242","243","244","245","246"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Select, Input, Switch, Button, Checkbox, Row, Col } from \"antd\";\r\nimport { useAllAdjusterType, useCreateDocument } from \"../AdjustersHook\";\r\n\r\ninterface createDocument {\r\n  closeModal: ()=> void;\r\n}\r\n\r\nconst { Option } = Select;\r\nconst CreateDocument: React.FC<createDocument> = ({ closeModal }) => {\r\n  const [\r\n    insertDocument,\r\n    { status, data, isError, error },\r\n  ] = useCreateDocument();\r\n  const [checked, setChecked] = useState(true);\r\n  const [setItem, setSetItem] = useState({\r\n    id: 0,\r\n    title: \"\",\r\n    isRequired: false,\r\n  });\r\n\r\n  const [createDocument, setCreateDocument] = useState({\r\n    title: \"\",\r\n    relatedAdjusterTypes: [\r\n      {\r\n        isRequired: true,\r\n        adjusterType: {\r\n          id: 0,\r\n        },\r\n      },\r\n    ],\r\n  });\r\n  const { data: allAdjusterType, isLoading } = useAllAdjusterType();\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = (values: any) => {\r\n    //console.log(\"Received values of form: \", values);\r\n    let newDocument = {\r\n      title: values.documentName,\r\n      relatedAdjusterTypes: values.adjusterType.map((item: any) => {\r\n        let obj = {\r\n          isRequired: checked,\r\n          adjusterType: {\r\n            id: item,\r\n          },\r\n        };\r\n        return obj;\r\n      }),\r\n    };\r\n\r\n    insertDocument(newDocument);\r\n    form.resetFields();\r\n  };\r\n\r\n  const changeRequireHandler = (checked: boolean, item: any) => {\r\n    item.isRequired = checked;\r\n\r\n    console.log(item, \"checkedItem\");\r\n\r\n    console.log(`switch to ${checked}`);\r\n\r\n    //   setItem({\r\n    //      ...item,\r\n    //      id:item.id,\r\n    //      isRequired:item.isRequired\r\n\r\n    //   })\r\n  };\r\n\r\n  //console.log(itemChecked,\"checkedwswitch\")\r\n  // const disabledDate = (current: any) => {\r\n  //     return (\r\n  //         current.day() === 4 || current.day() === 5\r\n  //     )\r\n  // }\r\n\r\n  // const  onChange=(checkedValues:any)=> {\r\n  //     console.log('checked = ', checkedValues);\r\n  //     setChecked(checkedValues)\r\n  //   }\r\n\r\n  const handleChange = (checked: any) => {\r\n    console.log(`switch to ${checked}`);\r\n  };\r\n\r\n  //handle Close Modal\r\n  useEffect(() => {\r\n    if (status == \"success\") closeModal();\r\n  }, [status]);\r\n\r\n  return (\r\n    <div>\r\n      <Form name=\"createDocument\" onFinish={onFinish}>\r\n        <Form.Item name=\"documentName\" label=\"نام\">\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"adjusterType\" label=\"نوع مدرک\">\r\n          <Checkbox.Group style={{ width: \"100%\" }}>\r\n            {allAdjusterType?.result?.map((item: any) => {\r\n              return (\r\n                <Row>\r\n                  <Col span={24} className=\"adjustersCheck\">\r\n                    <Checkbox\r\n                      value={item.id}\r\n                      style={{ lineHeight: \"32px\" }}\r\n                      key={item.id}\r\n                    >\r\n                      {item.title}\r\n                    </Checkbox>\r\n                    <Switch\r\n                      //defaultChecked\r\n                      onChange={(checked, event) =>\r\n                        changeRequireHandler(checked, item)\r\n                      }\r\n                      checkedChildren=\"اجباری\"\r\n                      unCheckedChildren=\"غیر اجباری\"\r\n                      checked={item.isRequired}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              );\r\n            })}\r\n          </Checkbox.Group>\r\n        </Form.Item>\r\n        <Button \r\n           type=\"primary\" \r\n           htmlType=\"submit\"\r\n           className=\"submit\"\r\n            block\r\n        >\r\n          ذخیره\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateDocument;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\RejectBaseInfoSeason\\CreateRejectionInfoSeason.tsx",["247","248","249","250","251","252","253"],"import React, {useEffect } from \"react\";\r\nimport { Form, Button, Input } from \"antd\";\r\nimport {\r\n  useCreateRejectionSeason,\r\n  useUpdateRejectionInfoSeason,\r\n} from \"../AdjustersHook\";\r\n\r\n\r\n\r\ninterface selectedSeasonProps {\r\n    id:number,\r\n    title:string \r\n}\r\n\r\ninterface Rejectionseason {\r\n  closeModal: () => void;\r\n  addForm: boolean;\r\n  selectedSeason: selectedSeasonProps | null;\r\n}\r\n\r\nconst CreateRejectionInfoSeason: React.FC<Rejectionseason> = ({\r\n  closeModal,\r\n  addForm,\r\n  selectedSeason,\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const [\r\n    insertRejection,\r\n    { status, data, isError, error },\r\n  ] = useCreateRejectionSeason();\r\n\r\n  const [updateRejection,{status:statusReject}] = useUpdateRejectionInfoSeason();\r\n\r\n  let seasonId = selectedSeason?.id;\r\n\r\n  //submitForm\r\n  const onFinish = (values: any) => {\r\n    let insertRejectionSeason = {\r\n      title: values.title,\r\n    };\r\n    if (addForm) {\r\n      insertRejection(insertRejectionSeason);\r\n    } else {\r\n      updateRejection({ seasonId, ...insertRejectionSeason });\r\n    }\r\n  };\r\n\r\n  //handle Close Modal\r\n  useEffect(() => {\r\n    if (status == \"success\"  || statusReject==\"success\"   ) closeModal();\r\n  }, [status,statusReject]);\r\n\r\n  //initialValueItemSeason\r\n  useEffect(() => {\r\n    addForm\r\n      ? form.resetFields()\r\n      : form.setFieldsValue({\r\n          title: selectedSeason?.title,\r\n        });\r\n  }, [selectedSeason, addForm]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"CreateRejectionInfoSeason\">\r\n        <Form name=\"createSpecialzedField\" onFinish={onFinish} form={form}>\r\n          <Form.Item name=\"title\" label=\"دلیل رد متقاضی\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"submit\">\r\n            ذخیره\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRejectionInfoSeason;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\Courses\\CreateCourse.tsx",["254","255","256","257","258"],"import React, { useState, useEffect } from \"react\";\r\nimport { useAllAdjusterType, useAllSeasons } from \"../AdjustersHook\";\r\nimport { Form, Select, Radio, Button, Row, Col, Input } from \"antd\";\r\nimport {\r\n  useCreateCourse,\r\n  useGetCourseId,\r\n  useUpdateCourse,\r\n} from \"../AdjustersHook\";\r\nimport { courseInfoProps } from \"./interface-course\";\r\nimport  DatePicker2  from \"../../../components/UI/DatePicker/DatePicker\"\r\nimport moment from \"jalali-moment\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const CreateCourse: React.FC<courseInfoProps> = ({\r\n  itemCourse,\r\n  addForm,\r\n  closeModal,\r\n}) => {\r\n  const { data: allAdjusterType } = useAllAdjusterType();\r\n  const [insertCourse, { status}] = useCreateCourse();\r\n  const [updateCourse, { status:status2 }] = useUpdateCourse();\r\n\r\n  //const { data: courseId } = useGetCourseId(selectedCourse)\r\n  //console.log(courseId, \"courseId\")\r\n\r\n  const [form] = Form.useForm();\r\n  const { data: seasons } = useAllSeasons();\r\n  const [createCourse, setCreateCourse] = useState({\r\n    title: \" \",\r\n    courseType: {\r\n      id: 0,\r\n    },\r\n    season: {\r\n      id: 0,\r\n    },\r\n    year: 0,\r\n    registerOpenDate: moment(),\r\n    registerCloseDate: moment()\r\n  });\r\n\r\n  //getYear\r\n  let formatOptions = { year: \"numeric\" };\r\n  let year = new Date()\r\n    .toLocaleDateString(\"fa-IR\", formatOptions)\r\n    .replace(/([۰-۹])/g, (token) =>\r\n      String.fromCharCode(token.charCodeAt(0) - 1728)\r\n    );\r\n\r\n  let courseId = itemCourse?.id;\r\n\r\n  //submitForm\r\n  const onFinish = (values: any) => {\r\n    // console.log('Received values of form: ', values);\r\n    let newCourse = {\r\n      title: values.title,\r\n      courseType: { id: values.courseType },\r\n      season: { id: values.season },\r\n      registerOpenDate: createCourse.registerOpenDate,\r\n      registerCloseDate: createCourse.registerCloseDate,\r\n      year: Number(values.year),\r\n    };\r\n\r\n    if (!addForm) {\r\n      updateCourse({ courseId, ...newCourse });\r\n    } else {\r\n      insertCourse(newCourse);\r\n    }\r\n  };\r\n\r\n  //initialValueItemCourse\r\n  useEffect(() => {\r\n    addForm\r\n      ? form.resetFields()\r\n      : form.setFieldsValue({\r\n          title: itemCourse && itemCourse.title,\r\n          courseType: itemCourse && itemCourse.courseType.id,\r\n          season: itemCourse && itemCourse.season.id,\r\n          interviewDate: itemCourse && itemCourse.interviewDate,\r\n          registerOpenDate: itemCourse && itemCourse.registerOpenDate,\r\n          registerCloseDate: itemCourse && itemCourse?.registerCloseDate,\r\n          year: itemCourse && itemCourse.year,\r\n        });\r\n  }, [itemCourse, addForm]);\r\n\r\n  //handle Close Modal\r\n  useEffect(() => {\r\n    if (status == \"success\"  ||  status2 == \"success\"  ) closeModal();\r\n  }, [status,status2]);\r\n\r\n\r\n   //getStartDateTime\r\n   const startDateHandler = (value: any) => {\r\n    setCreateCourse({\r\n      ...createCourse,\r\n      registerOpenDate: value.toDate(),\r\n    });\r\n  };\r\n\r\n  //getEndDateTime\r\n  const endDateHandler = (value: any) => {\r\n    setCreateCourse({\r\n        ...createCourse,\r\n        registerCloseDate: value.toDate(),\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form name=\"createCourse\" onFinish={onFinish} form={form}>\r\n        <Row>\r\n          <Col span={9}>\r\n            <Form.Item\r\n              name=\"courseType\"\r\n              label=\"نوع ارزیاب\"\r\n              rules={[\r\n                { required: true, message: \"انتخاب نوع ارزیاب الزامی می باشد\" },\r\n              ]}\r\n            >\r\n              <Select placeholder=\"انتخاب ارزیاب\" style={{ width: \"190px\" }}>\r\n                {allAdjusterType?.result.map(\r\n                  ({ id, title }: { id: number; title: string }) => (\r\n                    <Option key={id} value={id}>\r\n                      {title}\r\n                    </Option>\r\n                  )\r\n                )}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col span={9}>\r\n            <Form.Item\r\n              label=\"عنوان دوره\"\r\n              name=\"title\"\r\n              rules={[\r\n                { required: true, message: \"نام دوره الزامی می باشد \" },\r\n                {\r\n                  pattern: /^[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیئ\\s]+$/,\r\n                  message: \"حروف را به فارسی وارد نمایید\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input name=\"title\" />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={9}>\r\n            <Form.Item\r\n              name=\"year\"\r\n              label=\"سال دوره\"\r\n              rules={[\r\n                { required: true, message: \"انتخاب سال دوره الزامی می باشد\" },\r\n              ]}\r\n            >\r\n              <Radio.Group>\r\n                <Radio value={year}>{year}</Radio>\r\n                <Radio value={Number(year) + 1}>{Number(year) + 1}</Radio>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col span={9}>\r\n            <Form.Item\r\n              label=\"فصل دوره\"\r\n              name=\"season\"\r\n              rules={[\r\n                { required: true, message: \"انتخاب فصل دوره الزامی می باشد\" },\r\n              ]}\r\n            >\r\n              <Select placeholder=\"انتخاب فصل\" style={{ width: \"225px\" }}>\r\n                {seasons?.result.map(({id,title}:{id:number,title:string}) => (\r\n                  <Option key={id} value={id}>\r\n                    {title}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={9}>\r\n            <Form.Item\r\n              name=\"date\"\r\n              label=\"تاریخ\"        \r\n            >\r\n             \r\n             \r\n              <DatePicker2\r\n                placeholder=\"شروع ثبت نام\"\r\n                value={moment(createCourse.registerOpenDate)}\r\n                onChange={(value: any) => startDateHandler(value)}\r\n               \r\n              />\r\n            <DatePicker2\r\n                placeholder=\"پایان ثبت نام\"\r\n                value={moment(createCourse.registerCloseDate)}\r\n                onChange={(value: any) => endDateHandler(value)}\r\n              />\r\n\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Button type=\"primary\" htmlType=\"submit\" className=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateCourse;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\SpecializedField\\createSpecialzedField.tsx",["259","260","261","262","263","264","265","266"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Select, Button, Row, Col, Input, Checkbox, Switch } from \"antd\";\r\nimport {\r\n  useGetSpecializedFeild,\r\n  useCreateSpecializedFeild,\r\n  useUpdateSpecialzedFeild,\r\n} from \"../AdjustersHook\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface specializedField {\r\n  specializedFieldId?: any;\r\n  addForm?: boolean;\r\n  closeModal?: any;\r\n}\r\n\r\nconst CreateSpecialzedField: React.FC<specializedField> = ({\r\n  specializedFieldId,\r\n  addForm,\r\n  closeModal,\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const { data: specializedField, isLoading } = useGetSpecializedFeild();\r\n  const [\r\n    insertSpecializedFeild,\r\n    { status, data, isError, error },\r\n  ] = useCreateSpecializedFeild();\r\n  const [\r\n    updateSpeciazedFeild,\r\n    { status: statusFeild },\r\n  ] = useUpdateSpecialzedFeild();\r\n  const [isParent, setIsParent] = useState(false);\r\n\r\n  let Encid = specializedFieldId?.result?.id;\r\n\r\n  //submitForm\r\n  const onFinish = (values: any) => {\r\n    // console.log('Received values of form Feild: ', values);\r\n    let newSpecialzesField = {\r\n      title: values.title,\r\n      parentId: values.parent,\r\n      isEnabled: values.switch,\r\n    };\r\n\r\n    if (addForm) {\r\n      insertSpecializedFeild(newSpecialzesField);\r\n      form.resetFields();\r\n    } else {\r\n      updateSpeciazedFeild({ Encid, ...newSpecialzesField });\r\n    }\r\n  };\r\n\r\n  const onCheckboxChange = (e: any) => {\r\n    setIsParent(e.target.checked);\r\n  };\r\n\r\n  //handle Close Modal\r\n  useEffect(() => {\r\n    if (status == \"success\" || statusFeild == \"success\") closeModal();\r\n  }, [status, statusFeild]);\r\n\r\n  //getvaluebyId\r\n  useEffect(() => {\r\n    if (addForm) {\r\n      form.resetFields();\r\n    } else {\r\n      form.setFieldsValue({\r\n        title: specializedFieldId?.result.title,\r\n        switch: specializedFieldId?.result.isEnable,\r\n        // parent:specializedFieldId.result.parent,\r\n        // subFields:specialzedFeildId.subFields\r\n      });\r\n    }\r\n  }, [specializedFieldId]);\r\n\r\n  return (\r\n    <div className=\"CreateSpecialzedField\">\r\n      <Form name=\"createSpecialzedField\" onFinish={onFinish} form={form}>\r\n        <Form.Item name=\"title\" label=\"نام رشته\">\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Row>\r\n          <Col span={8}>\r\n            <Form.Item\r\n              name=\"isParent\"\r\n              // label=\"رشته پدر دارد؟\"\r\n            >\r\n              <Checkbox\r\n                checked={isParent}\r\n                onChange={onCheckboxChange}\r\n                style={{ lineHeight: \"32px\" }}\r\n              >\r\n                آیا رشته پدر دارد؟\r\n              </Checkbox>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col span={14}>\r\n            <Form.Item name=\"parent\" label=\"نام رشته پدر\">\r\n              <Select\r\n                placeholder=\"انتخاب نام رشته پدر\"\r\n                disabled={!isParent ? true : false}\r\n              >\r\n                {specializedField?.result.map(\r\n                  ({ title, id }: { title: string; id: number }) => {\r\n                    return (\r\n                      <Option key={id} value={id}>\r\n                        {title}\r\n                      </Option>\r\n                    );\r\n                  }\r\n                )}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n        <Form.Item name=\"switch\" label=\"فعال\" valuePropName=\"checked\">\r\n          <Switch className=\"activity\" />\r\n        </Form.Item>\r\n\r\n        <Button type=\"primary\" htmlType=\"submit\" className=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateSpecialzedField;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\LegalCard.tsx",["267","268","269","270","271","272","273","274","275","276"],"import React, { useState } from \"react\";\r\nimport { Row, Col, Popover, Modal, ConfigProvider, Select } from \"antd\";\r\nimport user from \"../../../assets/images/user.svg\";\r\nimport pushPin from \"../../../assets/images/push-pin.svg\";\r\nimport star from \"../../../assets/images/star.svg\";\r\nimport form from \"../../../assets/images/form.svg\";\r\nimport email from \"../../../assets/images/email.svg\";\r\nimport interviewTime from \"../../../assets/images/interviewTime.svg\";\r\nimport score from \"../../../assets/images/scoreboard.svg\";\r\nimport certificate from \"../../../assets/images/certificate.svg\";\r\nimport addUser from \"../../../assets/images/addUser.svg\";\r\nimport remove from \"../../../assets/images/remove.svg\";\r\nimport CaseHistory from \"./CaseHistory/CaseHistory\";\r\nimport Documents from \"./Documents/Documents\";\r\nimport FileDetail from \"../../FileDetail/FileDetail\";\r\nimport { useAllInterviewer } from \"../../Adjusters/AdjustersHook\";\r\n\r\ninterface Props {\r\n  item: any;\r\n}\r\n\r\ninterface IdName {\r\n  id: number;\r\n  familyName: string;\r\n}\r\n\r\nenum ViewType {\r\n  showIcon,\r\n  showSelect,\r\n  showText,\r\n}\r\n\r\nconst style = { height: \"100%\", padding: \"8px 0\" };\r\nconst { Option } = Select;\r\n\r\nconst LegalCard: React.FC<Props> = ({ item }) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [visibleِDoc, setVisibleDoc] = useState(false);\r\n  const [visibleِFile, setVisibleFile] = useState(false);\r\n  const { data: allInterviewer, isLoading } = useAllInterviewer();\r\n  const [textSearch, setTextSearch] = useState(\"\");\r\n  const [selectedItems, setSelectedItems] = useState({\r\n    selectedInterviewer: Array<IdName>(),\r\n  });\r\n  const [showHidden, setShowHidden] = useState({\r\n    showInterviewer: ViewType.showIcon,\r\n  });\r\n\r\n  //showModalCaseHistory\r\n  const caseHistoryVisibleHandler = () => {\r\n    setVisible(true);\r\n  };\r\n  //showModalDocument\r\n  const DocumentVisibleHandler = () => {\r\n    setVisibleDoc(true);\r\n  };\r\n  //showModalFileDetail\r\n  const fileDetailVisibleHandler = (item: any) => {\r\n    setVisibleFile(true);\r\n  };\r\n\r\n  //searchInterviewer\r\n  const onSearch = (value: string) => {\r\n    setTextSearch(value);\r\n    //setShowText(true);\r\n  };\r\n\r\n  const addUserHandler = () => {\r\n    setShowHidden((prev) => ({\r\n      ...prev,\r\n      showInterviewer: ViewType.showSelect,\r\n    }));\r\n  };\r\n\r\n  //blurInputInterviewer\r\n  const onBlur = () => {\r\n    setShowHidden((prev) => ({\r\n      ...prev,\r\n      showInterviewer: ViewType.showText,\r\n    }));\r\n  };\r\n\r\n  //changeInterviewer\r\n  const onChangeInterviewer = (ids: number[]) => {\r\n    setSelectedItems((prev) => ({\r\n      ...prev,\r\n      selectedInterviewer: allInterviewer.result.filter((interviewer: IdName) =>\r\n        ids.some((id) => id === interviewer.id)\r\n      ),\r\n    }));\r\n  };\r\n\r\n  //removeInterviewerWhenClickOnRemoveIcon\r\n  const removeHandler = (item: IdName) => {\r\n    if (\r\n      selectedItems.selectedInterviewer.length === 1 ||\r\n      textSearch.length > 0\r\n    ) {\r\n      setShowHidden((prev) => ({\r\n        ...prev,\r\n        showInterviewer: ViewType.showIcon,\r\n      }));\r\n    }\r\n    setSelectedItems((prev) => ({\r\n      ...prev,\r\n      selectedInterviewer: prev.selectedInterviewer.filter((it) => item !== it),\r\n    }));\r\n  };\r\n\r\n  let unRead = item.statusRead == \"خوانده نشده\";\r\n\r\n  return (\r\n    <div\r\n      className=\"LegalCard\"\r\n      onDoubleClick={fileDetailVisibleHandler}\r\n      style={{ borderRight: unRead ? \"5px solid #3499FF\" : \"\" }}\r\n    >\r\n      <div className=\"card\">\r\n        <div className=\"titleCard\">\r\n          <span>{item.name + \" \" + item.familyName}</span>\r\n          <span className=\"trackingCode\">{item.code}</span>\r\n        </div>\r\n        <div className=\"content\">\r\n          <ul>\r\n            <li>\r\n              <h5>کدملی:</h5>\r\n              <span> {item.nathionalCode} </span>\r\n            </li>\r\n            <li>\r\n              <h5>وضعیت</h5>\r\n              <span> {item.status} </span>\r\n            </li>\r\n            <li>\r\n              <h5>دوره</h5>\r\n              <span>{item.period} </span>\r\n            </li>\r\n            <li>\r\n              <h5>رشته تحصیلی</h5>\r\n              <span>{item.period} </span>\r\n            </li>\r\n            <li>\r\n              <h5>کد ارزیاب</h5>\r\n              <span>{item.code} </span>\r\n            </li>\r\n            <li>\r\n              <h5>نام پدر</h5>\r\n              <span>{item.fatherName} </span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <Row >\r\n            <Col className=\"gutter-row\" xs={2} sm={4} md={6} lg={8} xl={3}>\r\n              <div style={style}>\r\n                <div className=\"showsFavorit\">\r\n                  <img src={pushPin} alt=\"pushPin\" />\r\n                  <img src={star} alt=\"star\" />\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col className=\"gutter-row\" xs={2} sm={4} md={6} lg={8} xl={7}>\r\n              <Row style={{paddingTop:'20px'}}   >\r\n                <Col className=\"gutter-row\" xs={2} sm={4} md={6} lg={8} xl={7}>\r\n                  <div style={style}  className=\"text\" >\r\n                    <span>زمان مصاحبه</span>\r\n                    <img src={interviewTime} alt=\"interviewTime\" />\r\n                  </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\"  xs={2} sm={4} md={6} lg={8} xl={4}>\r\n                  <div style={style} className=\"text\"  >\r\n                   <span>نمره</span>\r\n                    <img src={score} alt=\"score\" />\r\n                  </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\"  xs={2} sm={4} md={6} lg={8} xl={13}>\r\n                  <div style={style}  className=\"text\"   >\r\n                  <a href=\"#\">\r\n                      <span>مصاحبه کننده/ مصاحبه کنندگان</span>\r\n                      {showHidden.showInterviewer === ViewType.showIcon ? (\r\n                        <a onClick={addUserHandler}>\r\n                          <img\r\n                            src={addUser}\r\n                            alt=\"addUser\"\r\n                            className=\"addInterviewer\"\r\n                          />\r\n                        </a>\r\n                      ) : showHidden.showInterviewer === ViewType.showText ? (\r\n                        <div className=\"removeInterviewer\">\r\n                          <div>\r\n                            {(\r\n                              <span>\r\n                                {textSearch} <img src={remove} alt=\"remove\" />{\" \"}\r\n                              </span>\r\n                            ) &&\r\n                              selectedItems.selectedInterviewer.map((item) => (\r\n                                <div\r\n                                  style={{ display: \"flex\", paddingTop: \"5px\" }}\r\n                                >\r\n                                  {item.familyName}\r\n                                  <a onClick={() => removeHandler(item)}>\r\n                                    <img src={remove} alt=\"remove\" />\r\n                                  </a>\r\n                                </div>\r\n                              ))}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <Select\r\n                          showSearch\r\n                          style={{ width: \"200px\" }}\r\n                          placeholder=\"انتخاب کنید\"\r\n                          optionFilterProp=\"children\"\r\n                          onSearch={onSearch}\r\n                          mode=\"multiple\"\r\n                          onChange={onChangeInterviewer}\r\n                          onBlur={onBlur}\r\n                          loading={isLoading ? true : false}\r\n                          allowClear\r\n                        >\r\n                          {allInterviewer?.result?.map(\r\n                            (interviewer: {\r\n                              id: number;\r\n                              familyName: string;\r\n                            }) => (\r\n                              <Option\r\n                                key={interviewer.id}\r\n                                value={interviewer.id}\r\n                              >\r\n                                {interviewer.familyName}\r\n                              </Option>\r\n                            )\r\n                          )}\r\n                        </Select>\r\n                      )}\r\n                    </a>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n{/* \r\n              <div style={style}>\r\n                <ul className=\"detailFile\">\r\n                  <li>\r\n                    <h5>زمان مصاحبه</h5>\r\n                    <img src={interviewTime} alt=\"interviewTime\" />\r\n                  </li>\r\n                  <li>\r\n                    <h5>نمره</h5>\r\n                    <img src={score} alt=\"score\" />\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#\">\r\n                      <h5>مصاحبه کننده/ مصاحبه کنندگان</h5>\r\n                      {showHidden.showInterviewer === ViewType.showIcon ? (\r\n                        <a onClick={addUserHandler}>\r\n                          <img\r\n                            src={addUser}\r\n                            alt=\"addUser\"\r\n                            className=\"addInterviewer\"\r\n                          />\r\n                        </a>\r\n                      ) : showHidden.showInterviewer === ViewType.showText ? (\r\n                        <div className=\"removeInterviewer\">\r\n                          <div>\r\n                            {(\r\n                              <span>\r\n                                {textSearch} <img src={remove} alt=\"remove\" />{\" \"}\r\n                              </span>\r\n                            ) &&\r\n                              selectedItems.selectedInterviewer.map((item) => (\r\n                                <div\r\n                                  style={{ display: \"flex\", paddingTop: \"5px\" }}\r\n                                >\r\n                                  {item.familyName}\r\n                                  <a onClick={() => removeHandler(item)}>\r\n                                    <img src={remove} alt=\"remove\" />\r\n                                  </a>\r\n                                </div>\r\n                              ))}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <Select\r\n                          showSearch\r\n                          style={{ width: \"200px\" }}\r\n                          placeholder=\"انتخاب کنید\"\r\n                          optionFilterProp=\"children\"\r\n                          onSearch={onSearch}\r\n                          mode=\"multiple\"\r\n                          onChange={onChangeInterviewer}\r\n                          onBlur={onBlur}\r\n                          loading={isLoading ? true : false}\r\n                          allowClear\r\n                        >\r\n                          {allInterviewer?.result?.map(\r\n                            (interviewer: {\r\n                              id: number;\r\n                              familyName: string;\r\n                            }) => (\r\n                              <Option\r\n                                key={interviewer.id}\r\n                                value={interviewer.id}\r\n                              >\r\n                                {interviewer.familyName}\r\n                              </Option>\r\n                            )\r\n                          )}\r\n                        </Select>\r\n                      )}\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div> */}\r\n            </Col>\r\n            <Col className=\"gutter-row\" xs={2} sm={4} md={6} lg={8} xl={7}>\r\n              <div style={style}>\r\n                <ul className=\"detailFile\">\r\n                  <li>\r\n                    <a onClick={fileDetailVisibleHandler}>\r\n                      {item.FileDetails == \"عدم تایید\" ? (\r\n                        <span className=\"notConfirm\"></span>\r\n                      ) : (\r\n                        <span className=\"confirm\"></span>\r\n                      )}\r\n                      جزییات پرونده\r\n                    </a>\r\n\r\n                    <span>{item.FileDetails}</span>\r\n                  </li>\r\n                  <li>\r\n                    <a onClick={caseHistoryVisibleHandler}>\r\n                      {item.FileDetails == \"عدم تایید\" ? (\r\n                        <span className=\"notConfirm\"></span>\r\n                      ) : (\r\n                        <span className=\"confirm\"></span>\r\n                      )}\r\n                      سوابق\r\n                    </a>\r\n\r\n                    <span>{item.FileDetails}</span>\r\n                  </li>\r\n                  <li>\r\n                    <a onClick={DocumentVisibleHandler}>\r\n                      {item.FileDetails == \"عدم تایید\" ? (\r\n                        <span className=\"notConfirm\"></span>\r\n                      ) : (\r\n                        <span className=\"confirm\"></span>\r\n                      )}\r\n                      مدارک\r\n                    </a>\r\n\r\n                    <span>{item.FileDetails}</span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </Col>\r\n\r\n            <Col\r\n              className=\"gutter-row refered \"\r\n              xs={2}\r\n              sm={4}\r\n              md={6}\r\n              lg={8}\r\n              xl={3}\r\n            >\r\n              <div style={style}>\r\n                <div style={style}>\r\n                  <img src={user} alt=\"user\" />\r\n                  <span>ارجاع به</span>\r\n                  <h5>-----</h5>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col className=\"gutter-row\" xs={2} sm={4} md={6} lg={8} xl={3}>\r\n              <div style={style} className=\"viewDocument\">\r\n                <Popover content=\"اطلاعات ارزیاب\" overlayClassName=\"popAction\">\r\n                  <img src={form} alt=\"form\" />\r\n                </Popover>\r\n                <Popover content=\"پروانه ارزیاب\" overlayClassName=\"popAction\">\r\n                  <img src={certificate} alt=\"certificate\" />\r\n                </Popover>\r\n                <Popover content=\"نامه چارگون\" overlayClassName=\"popAction\">\r\n                  <img src={email} alt=\"email\" />\r\n                </Popover>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n\r\n      <ConfigProvider direction=\"rtl\">\r\n        <Modal\r\n          title=\"سوابق\"\r\n          visible={visible}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisible(false)}\r\n          onCancel={() => setVisible(false)}\r\n          width={1400}\r\n        >\r\n          {visible && <CaseHistory />}\r\n        </Modal>\r\n\r\n        <Modal\r\n          title=\"مدارک و  مستندات\"\r\n          visible={visibleِDoc}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisibleDoc(false)}\r\n          onCancel={() => setVisibleDoc(false)}\r\n          width={1400}\r\n        >\r\n          {visibleِDoc && <Documents />}\r\n        </Modal>\r\n\r\n        <Modal\r\n          title={`پرونده ${item.name + \"\" + item.familyName}`}\r\n          visible={visibleِFile}\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          okButtonProps={{ style: { display: \"none\" } }}\r\n          onOk={() => setVisibleFile(false)}\r\n          onCancel={() => setVisibleFile(false)}\r\n          width={1600}\r\n          centered\r\n        >\r\n          {visibleِFile && (\r\n            <FileDetail\r\n              item={item}\r\n              closeFileDetail={() => setVisibleFile(false)}\r\n            />\r\n          )}\r\n        </Modal>\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LegalCard;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\AdmissionOfficeList\\Legal\\ScoreBoard\\ScoreBoard.tsx",["277","278","279","280","281","282","283"],"import React, { useState,FC } from \"react\";\r\nimport { useAllDocument } from \"../../../Adjusters/AdjustersHook\";\r\nimport { Table, ConfigProvider, Radio, Button } from \"antd\";\r\nimport download from \"../../../../assets/images/download.svg\";\r\nimport { adjuster } from \"../../interface-information\";\r\n\r\n\r\n\r\ninterface IpScoreBoard {\r\n  item: adjuster;\r\n  allInterviewer:any\r\n \r\n}\r\n\r\n\r\n\r\nconst  ScoreBoard:FC<IpScoreBoard>=({item,allInterviewer})=> {\r\n  console.log(allInterviewer,\"allInterviewerScore\")\r\n  const [value, setValue] = useState();\r\n  const { data: allDocuments, isLoading } = useAllDocument();\r\n\r\n  let dataDocument = allDocuments?.result?.map(\r\n    ({ id, title }: { id: number; title: string }) => {\r\n      let document = {\r\n        key: id,\r\n        id: id,\r\n        title: title,\r\n      };\r\n\r\n      return document;\r\n    }\r\n  );\r\n\r\n  console.log(dataDocument, \"dataDocument\");\r\n\r\n  const onChange = (e: any) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  let columns = [\r\n    {\r\n      title: \"نام مستند\",\r\n      dataIndex: \"title\",\r\n      editable: true,\r\n      width: \"40%\",\r\n    },\r\n\r\n    {\r\n      title: \"دریافت فایل\",\r\n      dataIndex: \"adjusterType\",\r\n      className: \"adjusterRequire\",\r\n      render: () => (\r\n        <a>\r\n          <img src={download} alt=\"download\" />\r\n        </a>\r\n      ),\r\n    },\r\n\r\n    {\r\n      title: (\r\n        <Radio.Group onChange={onChange} value={value}>\r\n          <Radio value={0}>رد</Radio>\r\n          <Radio value={1}>تایید</Radio>\r\n        </Radio.Group>\r\n      ),\r\n      dataIndex: \"status\",\r\n      render: () => (\r\n        <Radio.Group onChange={onChange} value={value}>\r\n          <Radio value={0}>رد</Radio>\r\n          <Radio value={1}>تایید</Radio>\r\n        </Radio.Group>\r\n      ),\r\n    },\r\n\r\n    {\r\n      title: \"دلیل رد\",\r\n      dataIndex: \"reject\",\r\n    },\r\n  ];\r\n\r\n  //rowSelection objects indicates the need for row selection\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: any, selectedRows: any) => {\r\n      console.log(\r\n        `selectedRowKeys: ${selectedRowKeys}`,\r\n        \"selectedRows: \",\r\n        selectedRows\r\n      );\r\n    },\r\n    onSelect: (record: any, selected: any, selectedRows: any) => {\r\n      console.log(record, selected, selectedRows);\r\n    },\r\n    onSelectAll: (selected: any, selectedRows: any, changeRows: any) => {\r\n      console.log(selected, selectedRows, changeRows);\r\n    },\r\n  };\r\n  return (\r\n    <div className=\"documentAdmissionList\">\r\n     \r\n      {/* <ConfigProvider direction=\"rtl\">\r\n        <Table\r\n          dataSource={dataDocument}\r\n          pagination={false}\r\n          columns={columns}\r\n          loading={isLoading ? true : false}\r\n          rowSelection={{ ...rowSelection }}\r\n        />\r\n        <Button type=\"primary\" className=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </ConfigProvider> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;\r\n\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\DetermineStatus\\DetermineStatus.tsx",["284","285"],"import React, { useState, FC } from \"react\";\r\nimport { Radio, Button, Modal } from \"antd\";\r\nimport { adjuster } from \"../../AdmissionOfficeList/interface-information\";\r\nimport RejectDetemineStatus from \"./RejectDetemineStatus\";\r\nimport ok from \"../../../assets/images/ok.svg\";\r\nimport delet from \"../../../assets/images/delet.svg\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./DetermineStatus.css\";\r\n\r\ninterface DetermineStatus {\r\n  item: adjuster;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst radioStyle = {\r\n  display: \"block\",\r\n  height: \"30px\",\r\n  lineHeight: \"30px\",\r\n};\r\n\r\nconst DetermineStatus: FC<DetermineStatus> = ({ item, closeModal }) => {\r\n  const [value, setValue] = useState();\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  //valueStatusHandler\r\n  const changeValueStatusHandler = (e: any) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const submitDetermineStatusHandler = () => {\r\n    if (value == 1) {\r\n      toast.success(`اختصاص داده شد ${item.name} کد ارزیاب موقت به `, {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      closeModal();\r\n    } else {\r\n      setVisible(true);\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"determineStatus\">\r\n      <div>\r\n        <Radio.Group onChange={changeValueStatusHandler} value={value}>\r\n          <Radio style={radioStyle} value={1}>\r\n            <img src={ok} alt=\"ok\" />\r\n            <span> جزییات پرونده {item.name} مورد تایید اینجانب می باشد</span>\r\n          </Radio>\r\n          <Radio style={radioStyle} value={0}>\r\n            <img src={delet} alt=\"delet\" />\r\n            <span> جزییات پرونده {item.name} مورد تایید اینجانب نمی باشد</span>\r\n          </Radio>\r\n        </Radio.Group>\r\n      </div>\r\n\r\n      <Modal\r\n        title=\"دلیل رد\"\r\n        visible={visible}\r\n        cancelButtonProps={{ style: { display: \"none\" } }}\r\n        okButtonProps={{ style: { display: \"none\" } }}\r\n        onOk={() => setVisible(false)}\r\n        onCancel={() => setVisible(false)}\r\n        width={900}\r\n        centered\r\n      >\r\n        <RejectDetemineStatus closeModal={() => setVisible(false)} />\r\n      </Modal>\r\n\r\n      <Button type=\"primary\" onClick={submitDetermineStatusHandler}>\r\n        ذخیره\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetermineStatus;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\Adjusters\\InterviewTime\\CreateInterviewTime.tsx",["286","287","288","289","290"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Select, InputNumber, Button, Row, Col, TimePicker } from \"antd\";\r\nimport {\r\n  useCreateTimeInterview,\r\n  useAllCourseAvailable,\r\n} from \"../AdjustersHook\";\r\nimport moment from \"jalali-moment\";\r\nimport DatePicker2 from \"../../../components/UI/DatePicker/DatePicker\";\r\n\r\nconst { Option } = Select;\r\nconst format = \"HH:mm\";\r\n\r\nconst CreateInterviewTime = (props: any) => {\r\n  const { data: coursesAvailable } = useAllCourseAvailable();\r\n  const [insertCreateTime, { status }] = useCreateTimeInterview();\r\n  const [timeDivisition, setTimeDivisition] = useState(30);\r\n  const [rangeTime, setRangeTime] = useState({\r\n    startTime: \"\",\r\n    endTime: \"\",\r\n  });\r\n\r\n  const [rangeDate, setRangeDate] = useState({\r\n    startDate: moment().add(1, \"day\"),\r\n    endDate: moment().add(1, \"day\"),\r\n  });\r\n\r\n  //submitCreateInterviewTime\r\n  const onFinish = (values: any) => {\r\n    let insertViewTime = {\r\n      time: {\r\n        startTime:\r\n          moment(rangeDate.startDate).format(\"YYYY-MM-DD\") + \"T\" + beginTime,\r\n        endTime: moment(rangeDate.endDate).format(\"YYYY-MM-DD\") + \"T\" + stTime,\r\n      },\r\n      course: {\r\n        id: props.selectedCourse,\r\n      },\r\n    };\r\n\r\n    for (\r\n      let s = startMoment;\r\n      moment(s, \"h:mm:ss\").add(timeDivisition, \"minutes\") <= endMoment;\r\n\r\n    ) {\r\n      let e = moment(s, \"h:mm:ss\").add(timeDivisition, \"minutes\");\r\n      s = e;\r\n    }\r\n\r\n    insertCreateTime(insertViewTime);\r\n  };\r\n\r\n  //startTimeWithdivition\r\n  let stTime = moment(rangeTime.startTime, \"h:mm:ss\")\r\n    .add(timeDivisition, \"minutes\")\r\n    .format(\"HH:mm:ss\");\r\n\r\n  //getTime\r\n  let enTime = moment(rangeTime.endTime, \"h:mm:ss\").format(\"HH:mm:ss\");\r\n  let beginTime = moment(rangeTime.startTime, \"h:mm:ss\").format(\"HH:mm:ss\");\r\n\r\n  let startMoment = moment(rangeTime.startTime, \"h:mm:ss\");\r\n  let endMoment = moment(rangeTime.endTime, \"h:mm:ss\");\r\n\r\n  //getDivition\r\n  const changeNumberHandler = (value: any) => {\r\n    setTimeDivisition(value);\r\n  };\r\n\r\n  //getStartDateTime\r\n  const startDateHandler = (value: any) => {\r\n    setRangeDate({\r\n      ...rangeDate,\r\n      startDate: value.toDate(),\r\n    });\r\n  };\r\n\r\n  //getEndDateTime\r\n  const endDateHandler = (value: any) => {\r\n    setRangeDate({\r\n      ...rangeDate,\r\n      endDate: value.toDate(),\r\n    });\r\n  };\r\n\r\n  //getstartTime\r\n  const startChangeHandler = (time: any, timeString: any) => {\r\n    setRangeTime({\r\n      ...rangeTime,\r\n      startTime: timeString,\r\n    });\r\n  };\r\n\r\n  //getEndTime\r\n  const endChangeHandler = (time: any, timeString: any) => {\r\n    setRangeTime({\r\n      ...rangeTime,\r\n      endTime: timeString,\r\n    });\r\n  };\r\n\r\n  //handle Close Modal\r\n  useEffect(() => {\r\n    if (status == \"success\") props.closeModal();\r\n  }, [status]);\r\n\r\n  return (\r\n    <div className=\"createInterviewTime\">\r\n      <Form name=\"interviewTime\" onFinish={onFinish}>\r\n        <Row>\r\n          <Col span={14}>\r\n            <Form.Item name=\"date\" label=\"انتخاب تاریخ\" className=\"rangeDate\">\r\n              <DatePicker2\r\n                placeholder=\"تاریخ شروع\"\r\n                value={moment(rangeDate.startDate)}\r\n                onChange={(value: any) => startDateHandler(value)}\r\n              />\r\n              <DatePicker2\r\n                placeholder=\"تاریخ پایان\"\r\n                value={moment(rangeDate.endDate)}\r\n                onChange={(value: any) => endDateHandler(value)}\r\n              />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col span={14}>\r\n            <Form.Item\r\n              name=\"rangeTime\"\r\n              label=\"ساعات مصاحبه\"\r\n              className=\"rangeTime\"\r\n            >\r\n              <TimePicker\r\n                placeholder=\"ساعت شروع مصاحبه\"\r\n                minuteStep={5}\r\n                format={format}\r\n                onChange={startChangeHandler}\r\n                className=\"timeStart\"\r\n              />\r\n              <TimePicker\r\n                placeholder=\"ساعت پایانی مصاحبه\"\r\n                minuteStep={5}\r\n                format={format}\r\n                onChange={endChangeHandler}\r\n              />\r\n            </Form.Item>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Form.Item\r\n              name=\"TimeDivision\"\r\n              label=\"تقسیم بندی زمانی\"\r\n              className=\"timDivision\"\r\n            >\r\n              <InputNumber\r\n                min={15}\r\n                max={180}\r\n                defaultValue={30}\r\n                step={15}\r\n                onChange={changeNumberHandler}\r\n              />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Button type=\"primary\" htmlType=\"submit\" className=\"submit\">\r\n          ذخیره\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateInterviewTime;\r\n","D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\container\\FileDetail\\DetermineStatus\\RejectDetemineStatus.tsx",["291","292"],"import React, { useState } from \"react\";\r\nimport { useRejectAllBaseInfo } from \"../../Adjusters/AdjustersHook\";\r\nimport { Checkbox, Row, Col, Input, Button } from \"antd\";\r\n\r\ninterface Props {\r\n  closeModal: () => void;\r\n}\r\n\r\nconst { TextArea } = Input;\r\nconst RejectDetemineStatus = (props: Props) => {\r\n  const { data: rejectAllBaseInfo } = useRejectAllBaseInfo();\r\n  const [valChecked, setValChecked] = useState([]);\r\n  const [otherChecked, setOtherChecked] = useState(false);\r\n  const [rejectText, setRejectText] = useState(\"\");\r\n\r\n  const onChange = (checkedValues: any) => {\r\n    // console.log(\"checked = \", checkedValues);\r\n    setValChecked(checkedValues);\r\n  };\r\n\r\n  const otherHandler = (e: any) => {\r\n    // console.log(`checked = ${e.target.checked}`);\r\n    setOtherChecked(e.target.checked);\r\n  };\r\n\r\n  //getValTextInput\r\n  const getTextHandler = (e: any) => {\r\n    setRejectText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox.Group style={{ width: \"100%\" }} onChange={onChange}>\r\n        <Row>\r\n          {rejectAllBaseInfo?.result.map(\r\n            ({ id, title }: { id: number; title: string }) => {\r\n              return (\r\n                <Col span={24} key={id} style={{ padding: \"10px\" }}>\r\n                  <Checkbox value={id}>{title}</Checkbox>\r\n                </Col>\r\n              );\r\n            }\r\n          )}\r\n        </Row>\r\n      </Checkbox.Group>\r\n      <div>\r\n        <Checkbox onChange={otherHandler} style={{ padding: \"12px\" }}>\r\n          سایر\r\n        </Checkbox>\r\n        {otherChecked ? (\r\n          <Input\r\n            style={{ width: 500, marginLeft: 10 }}\r\n            value={rejectText}\r\n            onChange={getTextHandler}\r\n          />\r\n        ) : null}\r\n      </div>\r\n\r\n      <div className=\"buttons\">\r\n        <Button ghost type=\"primary\">\r\n          بایگانی\r\n        </Button>\r\n        <Button type=\"primary\">مرجوع</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RejectDetemineStatus;\r\n",["293","294"],"D:\\Users\\m.nuri\\MCT\\Sanhab.MCT.Adjusters\\Development\\Sanhab.MCT.Adjusters.UI\\src\\components\\UI\\DatePicker\\DatePicker.js",["295","296","297","298"],"import React from \"react\";\r\nimport DatePicker from \"react-datepicker2\";\r\nimport moment from \"moment\";\r\nimport \"./DatePicker.css\";\r\n\r\nconst DatePicker2 = (props) => {\r\n  const getWeekend = () => {\r\n    const m = moment(),\r\n    weekends = [],\r\n    disableDays = [],\r\n    result = [];\r\n    let diff = 0;\r\n    let weekday = m.weekday();\r\n    weekday = weekday + 2;\r\n    if (weekday > 6) {\r\n      weekday = weekday - 6;\r\n    }\r\n\r\n    if (weekday == 5) {\r\n      weekends.push(m);\r\n      weekends.push(moment().add(1, \"day\"));\r\n    } else if (weekday == 6) {\r\n      weekends.push(moment().add(-1, \"day\"));\r\n      weekends.push(m);\r\n    } else {\r\n      diff = 7 - weekday;\r\n      weekends.push(moment().add(diff, \"day\"));\r\n      weekends.push(moment().add(diff + 1, \"day\"));\r\n    }\r\n\r\n    for (let index = 1; index < 8; index++) {\r\n      weekends.push(moment().add(diff + index * 7, \"day\"));\r\n      weekends.push(moment().add(diff + 1 + index * 7, \"day\"));\r\n    }\r\n\r\n    for (let i = 0; i < weekends.length; i = i + 2) {\r\n      result.push({\r\n        disabled: true,\r\n        start: weekends[i],\r\n        end: weekends[i + 1],\r\n      });\r\n    }\r\n\r\n  \r\n      result.push({\r\n        disabled: true,\r\n        start:moment('1399/03/14'),\r\n        end: moment('1399/03/14'),\r\n      });\r\n   \r\nconsole.log(result,\"result\")\r\n\r\n    return result;\r\n  };\r\n\r\n\r\n  return (\r\n    <DatePicker\r\n      placeholder={props.placeholder}\r\n      className=\"custom_calender\"\r\n      persianDigits={false}\r\n      value={props.value}\r\n      onChange={props.onChange}\r\n      isGregorian={false}\r\n      timePicker={false}\r\n      //ranges={getWeekend()}\r\n      defaultValue={props.defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DatePicker2;\r\n",{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":4,"column":27,"nodeType":"305","messageId":"306","endLine":4,"endColumn":33},{"ruleId":"307","severity":1,"message":"308","line":4,"column":8,"nodeType":"305","messageId":"306","endLine":4,"endColumn":25},{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"307","severity":1,"message":"309","line":9,"column":17,"nodeType":"305","messageId":"306","endLine":9,"endColumn":32},{"ruleId":"303","severity":1,"message":"310","line":5,"column":3,"nodeType":"305","messageId":"306","endLine":5,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":311,"column":39,"nodeType":"313","messageId":"314","endLine":311,"endColumn":41},{"ruleId":"307","severity":1,"message":"315","line":17,"column":31,"nodeType":"305","messageId":"306","endLine":17,"endColumn":47},{"ruleId":"307","severity":1,"message":"316","line":18,"column":10,"nodeType":"305","messageId":"306","endLine":18,"endColumn":26},{"ruleId":"307","severity":1,"message":"317","line":24,"column":9,"nodeType":"305","messageId":"306","endLine":24,"endColumn":14},{"ruleId":"307","severity":1,"message":"318","line":33,"column":21,"nodeType":"305","messageId":"306","endLine":33,"endColumn":33},{"ruleId":"307","severity":1,"message":"319","line":36,"column":7,"nodeType":"305","messageId":"306","endLine":36,"endColumn":12},{"ruleId":"320","severity":1,"message":"321","line":153,"column":17,"nodeType":"322","endLine":153,"endColumn":72},{"ruleId":"320","severity":1,"message":"321","line":167,"column":21,"nodeType":"322","endLine":167,"endColumn":43},{"ruleId":"307","severity":1,"message":"323","line":23,"column":10,"nodeType":"305","messageId":"306","endLine":23,"endColumn":25},{"ruleId":"307","severity":1,"message":"309","line":26,"column":17,"nodeType":"305","messageId":"306","endLine":26,"endColumn":32},{"ruleId":"320","severity":1,"message":"321","line":85,"column":13,"nodeType":"322","endLine":85,"endColumn":65},{"ruleId":"320","severity":1,"message":"321","line":97,"column":19,"nodeType":"322","endLine":97,"endColumn":41},{"ruleId":"320","severity":1,"message":"321","line":67,"column":13,"nodeType":"322","endLine":67,"endColumn":78},{"ruleId":"320","severity":1,"message":"321","line":80,"column":19,"nodeType":"322","endLine":80,"endColumn":41},{"ruleId":"320","severity":1,"message":"321","line":123,"column":27,"nodeType":"322","endLine":123,"endColumn":49},{"ruleId":"320","severity":1,"message":"321","line":129,"column":25,"nodeType":"322","endLine":132,"endColumn":26},{"ruleId":"324","severity":1,"message":"325","line":140,"column":23,"nodeType":"322","endLine":140,"endColumn":45},{"ruleId":"324","severity":1,"message":"325","line":149,"column":23,"nodeType":"322","endLine":149,"endColumn":45},{"ruleId":"307","severity":1,"message":"326","line":1,"column":27,"nodeType":"305","messageId":"306","endLine":1,"endColumn":36},{"ruleId":"307","severity":1,"message":"327","line":16,"column":3,"nodeType":"305","messageId":"306","endLine":16,"endColumn":7},{"ruleId":"320","severity":1,"message":"321","line":116,"column":15,"nodeType":"322","endLine":119,"endColumn":16},{"ruleId":"320","severity":1,"message":"321","line":137,"column":17,"nodeType":"322","endLine":137,"endColumn":39},{"ruleId":"307","severity":1,"message":"328","line":149,"column":9,"nodeType":"305","messageId":"306","endLine":149,"endColumn":21},{"ruleId":"307","severity":1,"message":"329","line":68,"column":17,"nodeType":"305","messageId":"306","endLine":68,"endColumn":25},{"ruleId":"307","severity":1,"message":"330","line":1,"column":17,"nodeType":"305","messageId":"306","endLine":1,"endColumn":25},{"ruleId":"307","severity":1,"message":"331","line":3,"column":20,"nodeType":"305","messageId":"306","endLine":3,"endColumn":27},{"ruleId":"307","severity":1,"message":"332","line":3,"column":29,"nodeType":"305","messageId":"306","endLine":3,"endColumn":34},{"ruleId":"307","severity":1,"message":"333","line":3,"column":36,"nodeType":"305","messageId":"306","endLine":3,"endColumn":50},{"ruleId":"307","severity":1,"message":"334","line":3,"column":52,"nodeType":"305","messageId":"306","endLine":3,"endColumn":58},{"ruleId":"307","severity":1,"message":"335","line":5,"column":8,"nodeType":"305","messageId":"306","endLine":5,"endColumn":10},{"ruleId":"307","severity":1,"message":"336","line":6,"column":8,"nodeType":"305","messageId":"306","endLine":6,"endColumn":13},{"ruleId":"307","severity":1,"message":"337","line":9,"column":17,"nodeType":"305","messageId":"306","endLine":9,"endColumn":25},{"ruleId":"307","severity":1,"message":"338","line":14,"column":10,"nodeType":"305","messageId":"306","endLine":14,"endColumn":16},{"ruleId":"307","severity":1,"message":"339","line":14,"column":18,"nodeType":"305","messageId":"306","endLine":14,"endColumn":27},{"ruleId":"320","severity":1,"message":"321","line":119,"column":9,"nodeType":"322","endLine":119,"endColumn":12},{"ruleId":"307","severity":1,"message":"326","line":1,"column":21,"nodeType":"305","messageId":"306","endLine":1,"endColumn":30},{"ruleId":"307","severity":1,"message":"340","line":3,"column":11,"nodeType":"305","messageId":"306","endLine":3,"endColumn":19},{"ruleId":"341","severity":1,"message":"342","line":39,"column":7,"nodeType":"305","messageId":"343","endLine":39,"endColumn":51},{"ruleId":"320","severity":1,"message":"321","line":148,"column":11,"nodeType":"322","endLine":148,"endColumn":30},{"ruleId":"320","severity":1,"message":"321","line":196,"column":17,"nodeType":"322","endLine":196,"endColumn":20},{"ruleId":"320","severity":1,"message":"321","line":205,"column":19,"nodeType":"322","endLine":205,"endColumn":47},{"ruleId":"320","severity":1,"message":"321","line":223,"column":29,"nodeType":"322","endLine":223,"endColumn":68},{"ruleId":"320","severity":1,"message":"321","line":255,"column":17,"nodeType":"322","endLine":255,"endColumn":20},{"ruleId":"320","severity":1,"message":"321","line":261,"column":17,"nodeType":"322","endLine":261,"endColumn":20},{"ruleId":"320","severity":1,"message":"321","line":267,"column":17,"nodeType":"322","endLine":267,"endColumn":20},{"ruleId":"307","severity":1,"message":"337","line":8,"column":17,"nodeType":"305","messageId":"306","endLine":8,"endColumn":25},{"ruleId":"320","severity":1,"message":"321","line":77,"column":9,"nodeType":"322","endLine":77,"endColumn":12},{"ruleId":"303","severity":1,"message":"344","line":25,"column":19,"nodeType":"305","messageId":"306","endLine":25,"endColumn":29},{"ruleId":"345","severity":1,"message":"346","line":36,"column":17,"nodeType":"347","messageId":"348","endLine":36,"endColumn":63,"fix":"349"},{"ruleId":"345","severity":1,"message":"346","line":37,"column":15,"nodeType":"347","messageId":"348","endLine":37,"endColumn":59,"fix":"350"},{"ruleId":"311","severity":1,"message":"312","line":56,"column":36,"nodeType":"313","messageId":"314","endLine":56,"endColumn":38},{"ruleId":"303","severity":1,"message":"351","line":87,"column":9,"nodeType":"305","messageId":"306","endLine":87,"endColumn":20},{"ruleId":"320","severity":1,"message":"321","line":100,"column":13,"nodeType":"322","endLine":100,"endColumn":50},{"ruleId":"320","severity":1,"message":"321","line":109,"column":15,"nodeType":"322","endLine":109,"endColumn":18},{"ruleId":"307","severity":1,"message":"352","line":2,"column":56,"nodeType":"305","messageId":"306","endLine":2,"endColumn":62},{"ruleId":"307","severity":1,"message":"315","line":6,"column":3,"nodeType":"305","messageId":"306","endLine":6,"endColumn":19},{"ruleId":"307","severity":1,"message":"353","line":7,"column":3,"nodeType":"305","messageId":"306","endLine":7,"endColumn":23},{"ruleId":"307","severity":1,"message":"354","line":30,"column":10,"nodeType":"305","messageId":"306","endLine":30,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":30,"column":23,"nodeType":"305","messageId":"306","endLine":30,"endColumn":37},{"ruleId":"307","severity":1,"message":"356","line":42,"column":15,"nodeType":"305","messageId":"306","endLine":42,"endColumn":19},{"ruleId":"307","severity":1,"message":"357","line":42,"column":21,"nodeType":"305","messageId":"306","endLine":42,"endColumn":28},{"ruleId":"307","severity":1,"message":"358","line":42,"column":30,"nodeType":"305","messageId":"306","endLine":42,"endColumn":35},{"ruleId":"307","severity":1,"message":"359","line":47,"column":24,"nodeType":"305","messageId":"306","endLine":47,"endColumn":33},{"ruleId":"307","severity":1,"message":"360","line":61,"column":9,"nodeType":"305","messageId":"306","endLine":61,"endColumn":11},{"ruleId":"361","severity":1,"message":"362","line":92,"column":6,"nodeType":"363","endLine":92,"endColumn":25,"suggestions":"364"},{"ruleId":"311","severity":1,"message":"312","line":96,"column":16,"nodeType":"313","messageId":"314","endLine":96,"endColumn":18},{"ruleId":"361","severity":1,"message":"365","line":97,"column":6,"nodeType":"363","endLine":97,"endColumn":14,"suggestions":"366"},{"ruleId":"307","severity":1,"message":"367","line":9,"column":9,"nodeType":"305","messageId":"306","endLine":9,"endColumn":15},{"ruleId":"307","severity":1,"message":"356","line":13,"column":15,"nodeType":"305","messageId":"306","endLine":13,"endColumn":19},{"ruleId":"307","severity":1,"message":"357","line":13,"column":21,"nodeType":"305","messageId":"306","endLine":13,"endColumn":28},{"ruleId":"307","severity":1,"message":"358","line":13,"column":30,"nodeType":"305","messageId":"306","endLine":13,"endColumn":35},{"ruleId":"307","severity":1,"message":"368","line":15,"column":19,"nodeType":"305","messageId":"306","endLine":15,"endColumn":29},{"ruleId":"307","severity":1,"message":"369","line":16,"column":10,"nodeType":"305","messageId":"306","endLine":16,"endColumn":17},{"ruleId":"307","severity":1,"message":"370","line":16,"column":19,"nodeType":"305","messageId":"306","endLine":16,"endColumn":29},{"ruleId":"307","severity":1,"message":"371","line":22,"column":10,"nodeType":"305","messageId":"306","endLine":22,"endColumn":24},{"ruleId":"307","severity":1,"message":"372","line":22,"column":26,"nodeType":"305","messageId":"306","endLine":22,"endColumn":43},{"ruleId":"307","severity":1,"message":"359","line":33,"column":34,"nodeType":"305","messageId":"306","endLine":33,"endColumn":43},{"ruleId":"307","severity":1,"message":"373","line":82,"column":9,"nodeType":"305","messageId":"306","endLine":82,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":88,"column":16,"nodeType":"313","messageId":"314","endLine":88,"endColumn":18},{"ruleId":"361","severity":1,"message":"365","line":89,"column":6,"nodeType":"363","endLine":89,"endColumn":14,"suggestions":"374"},{"ruleId":"307","severity":1,"message":"356","line":29,"column":15,"nodeType":"305","messageId":"306","endLine":29,"endColumn":19},{"ruleId":"307","severity":1,"message":"357","line":29,"column":21,"nodeType":"305","messageId":"306","endLine":29,"endColumn":28},{"ruleId":"307","severity":1,"message":"358","line":29,"column":30,"nodeType":"305","messageId":"306","endLine":29,"endColumn":35},{"ruleId":"311","severity":1,"message":"312","line":50,"column":16,"nodeType":"313","messageId":"314","endLine":50,"endColumn":18},{"ruleId":"311","severity":1,"message":"312","line":50,"column":45,"nodeType":"313","messageId":"314","endLine":50,"endColumn":47},{"ruleId":"361","severity":1,"message":"365","line":51,"column":6,"nodeType":"363","endLine":51,"endColumn":27,"suggestions":"375"},{"ruleId":"361","severity":1,"message":"362","line":60,"column":6,"nodeType":"363","endLine":60,"endColumn":31,"suggestions":"376"},{"ruleId":"307","severity":1,"message":"377","line":6,"column":3,"nodeType":"305","messageId":"306","endLine":6,"endColumn":17},{"ruleId":"361","severity":1,"message":"362","line":84,"column":6,"nodeType":"363","endLine":84,"endColumn":27,"suggestions":"378"},{"ruleId":"311","severity":1,"message":"312","line":88,"column":16,"nodeType":"313","messageId":"314","endLine":88,"endColumn":18},{"ruleId":"311","severity":1,"message":"312","line":88,"column":42,"nodeType":"313","messageId":"314","endLine":88,"endColumn":44},{"ruleId":"361","severity":1,"message":"365","line":89,"column":6,"nodeType":"363","endLine":89,"endColumn":22,"suggestions":"379"},{"ruleId":"307","severity":1,"message":"359","line":23,"column":35,"nodeType":"305","messageId":"306","endLine":23,"endColumn":44},{"ruleId":"307","severity":1,"message":"356","line":26,"column":15,"nodeType":"305","messageId":"306","endLine":26,"endColumn":19},{"ruleId":"307","severity":1,"message":"357","line":26,"column":21,"nodeType":"305","messageId":"306","endLine":26,"endColumn":28},{"ruleId":"307","severity":1,"message":"358","line":26,"column":30,"nodeType":"305","messageId":"306","endLine":26,"endColumn":35},{"ruleId":"311","severity":1,"message":"312","line":59,"column":16,"nodeType":"313","messageId":"314","endLine":59,"endColumn":18},{"ruleId":"311","severity":1,"message":"312","line":59,"column":44,"nodeType":"313","messageId":"314","endLine":59,"endColumn":46},{"ruleId":"361","severity":1,"message":"365","line":60,"column":6,"nodeType":"363","endLine":60,"endColumn":27,"suggestions":"380"},{"ruleId":"361","severity":1,"message":"381","line":74,"column":6,"nodeType":"363","endLine":74,"endColumn":26,"suggestions":"382"},{"ruleId":"311","severity":1,"message":"312","line":110,"column":32,"nodeType":"313","messageId":"314","endLine":110,"endColumn":34},{"ruleId":"320","severity":1,"message":"383","line":173,"column":21,"nodeType":"322","endLine":173,"endColumn":33},{"ruleId":"320","severity":1,"message":"321","line":176,"column":25,"nodeType":"322","endLine":176,"endColumn":53},{"ruleId":"320","severity":1,"message":"321","line":196,"column":35,"nodeType":"322","endLine":196,"endColumn":74},{"ruleId":"320","severity":1,"message":"321","line":240,"column":21,"nodeType":"322","endLine":240,"endColumn":59},{"ruleId":"311","severity":1,"message":"312","line":241,"column":41,"nodeType":"313","messageId":"314","endLine":241,"endColumn":43},{"ruleId":"320","severity":1,"message":"321","line":252,"column":21,"nodeType":"322","endLine":252,"endColumn":60},{"ruleId":"311","severity":1,"message":"312","line":253,"column":41,"nodeType":"313","messageId":"314","endLine":253,"endColumn":43},{"ruleId":"320","severity":1,"message":"321","line":264,"column":21,"nodeType":"322","endLine":264,"endColumn":57},{"ruleId":"311","severity":1,"message":"312","line":265,"column":41,"nodeType":"313","messageId":"314","endLine":265,"endColumn":43},{"ruleId":"307","severity":1,"message":"384","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":15},{"ruleId":"307","severity":1,"message":"333","line":3,"column":17,"nodeType":"305","messageId":"306","endLine":3,"endColumn":31},{"ruleId":"307","severity":1,"message":"385","line":3,"column":40,"nodeType":"305","messageId":"306","endLine":3,"endColumn":46},{"ruleId":"307","severity":1,"message":"359","line":20,"column":31,"nodeType":"305","messageId":"306","endLine":20,"endColumn":40},{"ruleId":"307","severity":1,"message":"386","line":41,"column":7,"nodeType":"305","messageId":"306","endLine":41,"endColumn":14},{"ruleId":"320","severity":1,"message":"321","line":54,"column":9,"nodeType":"322","endLine":54,"endColumn":12},{"ruleId":"307","severity":1,"message":"328","line":83,"column":9,"nodeType":"305","messageId":"306","endLine":83,"endColumn":21},{"ruleId":"341","severity":1,"message":"387","line":22,"column":7,"nodeType":"305","messageId":"343","endLine":22,"endColumn":43},{"ruleId":"311","severity":1,"message":"312","line":32,"column":15,"nodeType":"313","messageId":"314","endLine":32,"endColumn":17},{"ruleId":"307","severity":1,"message":"367","line":10,"column":9,"nodeType":"305","messageId":"306","endLine":10,"endColumn":15},{"ruleId":"307","severity":1,"message":"388","line":14,"column":17,"nodeType":"305","messageId":"306","endLine":14,"endColumn":33},{"ruleId":"307","severity":1,"message":"389","line":58,"column":7,"nodeType":"305","messageId":"306","endLine":58,"endColumn":13},{"ruleId":"311","severity":1,"message":"312","line":103,"column":16,"nodeType":"313","messageId":"314","endLine":103,"endColumn":18},{"ruleId":"361","severity":1,"message":"390","line":104,"column":6,"nodeType":"363","endLine":104,"endColumn":14,"suggestions":"391"},{"ruleId":"307","severity":1,"message":"392","line":9,"column":9,"nodeType":"305","messageId":"306","endLine":9,"endColumn":17},{"ruleId":"307","severity":1,"message":"393","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":20},{"ruleId":"299","replacedBy":"394"},{"ruleId":"301","replacedBy":"395"},{"ruleId":"303","severity":1,"message":"396","line":7,"column":9,"nodeType":"305","messageId":"306","endLine":7,"endColumn":19},{"ruleId":"303","severity":1,"message":"397","line":10,"column":5,"nodeType":"305","messageId":"306","endLine":10,"endColumn":16},{"ruleId":"311","severity":1,"message":"312","line":19,"column":17,"nodeType":"313","messageId":"314","endLine":19,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":22,"column":24,"nodeType":"313","messageId":"314","endLine":22,"endColumn":26},"no-native-reassign",["398"],"no-negated-in-lhs",["399"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'CourseInformation' is defined but never used.","'allAdjusterType' is assigned a value but never used.","'MutationResultPair' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useInterviewerId' is defined but never used.","'getInterviewerId' is defined but never used.","'cache' is assigned a value but never used.","'setPageModel' is assigned a value but never used.","'EncId' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'seletedDocument' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useEffect' is defined but never used.","'Form' is defined but never used.","'rowSelection' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'useState' is defined but never used.","'Popover' is defined but never used.","'Modal' is defined but never used.","'ConfigProvider' is defined but never used.","'Select' is defined but never used.","'ok' is defined but never used.","'delet' is defined but never used.","'setValue' is assigned a value but never used.","'cheked' is assigned a value but never used.","'setCheked' is assigned a value but never used.","'adjuster' is defined but never used.","@typescript-eslint/no-redeclare","'InformationAdjuster' is already defined.","redeclared","'setAddForm' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property format.","MemberExpression","unexpectedWhitespace",{"range":"400","text":"401"},{"range":"402","text":"401"},"'resizeEvent' is assigned a value but never used.","'Upload' is defined but never used.","'useUpdateInterviewer' is defined but never used.","'interviewer' is assigned a value but never used.","'setInterviewer' is assigned a value but never used.","'data' is assigned a value but never used.","'isError' is assigned a value but never used.","'error' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'tt' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["403"],"React Hook useEffect has a missing dependency: 'closeModal'. Either include it or remove the dependency array. If 'closeModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["404"],"'Option' is assigned a value but never used.","'setChecked' is assigned a value but never used.","'setItem' is assigned a value but never used.","'setSetItem' is assigned a value but never used.","'createDocument' is assigned a value but never used.","'setCreateDocument' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["405"],["406"],["407"],"'useGetCourseId' is defined but never used.",["408"],["409"],["410"],"React Hook useEffect has missing dependencies: 'addForm' and 'form'. Either include them or remove the dependency array.",["411"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Table' is defined but never used.","'Button' is defined but never used.","'columns' is assigned a value but never used.","'DetermineStatus' is already defined.","'coursesAvailable' is assigned a value but never used.","'enTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["412"],"'TextArea' is assigned a value but never used.","'valChecked' is assigned a value but never used.",["398"],["399"],"'getWeekend' is assigned a value but never used.","'disableDays' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[1431,1433],".",[1504,1506],{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"415","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},"Update the dependencies array to be: [itemUser, addForm, form]",{"range":"432","text":"433"},"Update the dependencies array to be: [closeModal, status]",{"range":"434","text":"435"},{"range":"436","text":"435"},"Update the dependencies array to be: [closeModal, status, statusReject]",{"range":"437","text":"438"},"Update the dependencies array to be: [selectedSeason, addForm, form]",{"range":"439","text":"440"},"Update the dependencies array to be: [itemCourse, addForm, form]",{"range":"441","text":"442"},"Update the dependencies array to be: [closeModal, status, status2]",{"range":"443","text":"444"},"Update the dependencies array to be: [closeModal, status, statusFeild]",{"range":"445","text":"446"},"Update the dependencies array to be: [addForm, form, specializedFieldId]",{"range":"447","text":"448"},"Update the dependencies array to be: [props, status]",{"range":"449","text":"450"},[2776,2795],"[itemUser, addForm, form]",[2895,2903],"[closeModal, status]",[2254,2262],[1194,1215],"[closeModal, status, statusReject]",[1401,1426],"[selectedSeason, addForm, form]",[2577,2598],"[itemCourse, addForm, form]",[2726,2742],"[closeModal, status, status2]",[1600,1621],"[closeModal, status, statusFeild]",[1986,2006],"[addForm, form, specializedFieldId]",[2783,2791],"[props, status]"]